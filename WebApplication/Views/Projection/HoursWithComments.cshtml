@{ Layout = "~/Views/Shared/_Layout.cshtml"; }

<div class="row">
    <div class="col-md-3"> </div>
    <div class="col-md-6">
        <div class="box box-danger" style="margin-top:5%;">

            <div class="box-header">
                <h3 class="box-title">@ViewData["Filter"]</h3>
            </div>

            <hr />

            <div class="box-body">
                <div style="width:100%;">
                    <div style="width:50%; float:left;">
                        <div class="form-group">
                            <label class="control-label">Υπάλληλος</label>
                            <div class="input-group" style="width:100%">
                                <select id="Employee_Select2" style="width:70%"></select>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label">Πόστο</label>
                            <div class="input-group" style="width:100%">
                                <select id="WorkPlace_Select2" style="width:70%"></select>
                            </div>
                        </div>

                    </div>
                    <div style="width:50%; float:left;">
                        <label class="control-label">Χρονικό έυρος</label>
                        <div class="input-group">
                            <input id="SearchRangeInput" class="form-control" />
                        </div>
                        <div class="form-group" style=" padding-top:5%;">
                            <label class="control-label">Φιλτράρισμα ανα</label>&nbsp
                            <input type="checkbox" class="filterSlider" id="SliderHourTypeChoice">
                        </div>

                    </div>
                </div>
            </div>

            <div class="box-footer" style="text-align:center;">
                <button id="DataTableSearch" class="btn btn-primary"><i class="fa fa-search"></i> Αναζήτηση</button>
            </div>

        </div>
    </div>
    <div class="col-md-3"> </div>
</div>


<div class="row">
    <div class="col-md-12">
        <div class="box box-danger" style="margin-top:5%;">
            <div class="box-header">
                <h3 class="box-title">@ViewData["Title"]</h3>
            </div>
            <hr />
            <div class="box-body table-responsive">
                <table id="EmployeeHoursWithCommentsDatatable" class="table table-bordered table-hover table-responsive stripe">
                    <thead>
                        <tr>
                            <th>Επίθετο</th>
                            <th>Όνομα</th>
                            <th>Erp Code</th>
                            <th>Βάρδια</th>
                            <th>Τύπος</th>
                            <th>Πόστο</th>
                            <th>Σχόλιο</th>
                        </tr>
                    </thead>
                    <tfoot>
                        <tr>
                            <th>Επίθετο</th>
                            <th>Όνομα</th>
                            <th>Erp Code</th>
                            <th>Βάρδια</th>
                            <th>Τύπος</th>
                            <th>Πόστο</th>
                            <th>Σχόλιο</th>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const BuildSelect2Dto = (params) => ({
            search: params.term,
            page: params.page || 1
        });

        const ConvertDateForApi = timeStamp =>
            CompleteTimeWithZerosForApiPost(new Date(parseInt(timeStamp)));

        CompleteTimeWithZerosForApiPost = date => {
            var year = date.getFullYear();
            var month = String((date.getMonth() + 1)).length == 1 ?
                '0' + (date.getMonth() + 1) : (date.getMonth() + 1);
            var day = String(date.getDate()).length == 1 ?
                '0' + date.getDate() : date.getDate();
            var hour = String(date.getHours()).length == 1 ?
                '0' + date.getHours() : date.getHours();
            var min = String(date.getMinutes()).length == 1 ?
                '0' + date.getMinutes() : date.getMinutes();

            return year + '-' + month + '-' + day + 'T' + hour + ':' + min;
        }

        const GetSelectedEmployeeId = () =>
            document.getElementById('Employee_Select2').value;

        const GetSelectedWorkPlaceId = () =>
            document.getElementById('WorkPlace_Select2').value;

        const GetSliderHourTypeChoiceValue = () =>
            document.getElementById('SliderHourTypeChoice').checked != true;

        const GetStartOn = () =>
            new Date(moment(document.getElementById('SearchRangeInput').value
                .split('/-/')[0], 'DD/MM/YYYY').format('MM/DD/YYYY HH:mm'));

        const GetEndOn = () => {
            var date = new Date(moment(document.getElementById('SearchRangeInput').value
                .split('/-/')[1], 'DD/MM/YYYY').format('MM/DD/YYYY HH:mm'));
            date.setHours(23, 59, 59, 59);
            return new Date(date);
        }

        const GetDaysDifferenceFromRange = () =>
            Math.ceil(Math.abs(GetEndOn() - GetStartOn()) / (1000 * 60 * 60 * 24))

        const setHoursToMax = date => {
            var newDate = new Date(date);
            newDate.setHours(23, 59, 59);
            return moment(newDate);
        }
    </script>

    <script>
        $('#SliderHourTypeChoice').bootstrapToggle({
            on: 'Χρονοδιαγράμματος',
            off: 'Πραγματικές',
            onstyle: 'primary',
            offstyle: 'primary'
        });

        $('#Employee_Select2').select2({
            placeholder: "Επέλεξε υπάλληλο",
            allowClear: true,
            ajax: {
                type: "POST",
                url: '/api/employees/select2',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: (params) => JSON.stringify(BuildSelect2Dto(params))
            }
        });

        $('#WorkPlace_Select2').select2({
            placeholder: "Επέλεξε πόστο",
            allowClear: true,
            ajax: {
                type: "POST",
                url: '/api/workplaces/select2',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: (params) => JSON.stringify(BuildSelect2Dto(params))
            }
        });

        $('#SearchRangeInput').calentim({
            showTimePickers: false,
            startOnMonday: true,
            showFooter: false,
            calendarCount: 1,
            startDate: Date.now(),
            endDate: Date.now(),
            format: "DD/MM/YYYY",
            dateSeparator: '/-/',
            locale: "el",
            onaftershow: () =>
                //Fix Calentim width
                [...document.getElementsByClassName('calentim-input')]
                    .forEach((calentim) =>
                        calentim.setAttribute('style', 'width: 400px;'))
        });


        $('#DataTableSearch').on('click', () => {
            if (!$.fn.dataTable.isDataTable("#EmployeeHoursWithCommentsDatatable"))
                CreateDataTable();

            $('#EmployeeHoursWithCommentsDatatable').DataTable().ajax.reload();
        });
        var DestroyDataTable = () => $('#EmployeeHoursWithCommentsDatatable')
            .DataTable().destroy();

        var CreateDataTable = () =>
            new DataTableService('#EmployeeHoursWithCommentsDatatable')
                .ForApiController('projections')
                .AddColumn(true, true, "LastName")
                .AddColumn(false, false, "FirstName")
                .AddColumn(false, false, "ErpCode")
                .AddColumn(false, false, "Hour")
                .AddColumn(false, false, "Hour_Type")
                .AddColumn(false, false, "WorkPlace_Title")
                .AddColumn(false, false, "Comment")
                .AjaxData((data, type, row, meta) => {
                    data.predicate = 'ProjectionHoursWithComments';

                    if (GetSelectedEmployeeId() != '')
                        data.filterByEmployeeId = GetSelectedEmployeeId();

                    if (GetSelectedWorkPlaceId() != '')
                        data.filterByWorkPlaceId = GetSelectedWorkPlaceId();

                    data.StartOn = ConvertDateForApi(GetStartOn().valueOf());
                    data.EndOn = ConvertDateForApi(GetEndOn().valueOf());
                    data.filterByRealWorkHour = GetSliderHourTypeChoiceValue();
                    return JSON.stringify(data);
                })
                .CompleteDataTable();

    </script>
}
