@{ Layout = "~/Views/Shared/_Layout.cshtml"; }

<div class="row">
    <div class="col-md-3"> </div>
    <div class="col-md-6">
        <div class="box box-danger" style="margin-top:5%;">

            <div class="box-header">
                <h3 class="box-title">@ViewData["Filter"]</h3>
            </div>

            <hr />


            <div class="box-body">
                <div style="width:100%;">
                    <div style="width:50%; float:left;">
                        <div class="input-group" style="width:100%; margin-bottom:10px;">
                            <div class="form-group">
                                <label class="control-label">Πόστο</label>
                                <select id="WorkPlace_Select2" style="width:70%"></select>
                            </div>
                        </div>
                        <div style="width:100%; float:left;">
                            <div class="form-group">
                                <label class="control-label">Ανα χρονόγραμμα</label>&nbsp
                                <input type="checkbox" class="filterSlider" id="SliderWorkHour" checked>
                            </div>
                        </div>
                        <div style="width:100%; float:left;">
                            <label class="control-label">Ανα πραγματική</label>&nbsp
                            <input type="checkbox" class="filterSlider" id="SliderRealWorkHour" checked>
                        </div>
                    </div>
                    <div style="width:50%; float:left;">
                        <div style="width:100%; float:left;">
                            <label class="control-label">Χρονικό έυρος</label>
                            <div class="input-group">
                                <input id="SearchRangeInput" class="form-control" />
                            </div>
                        </div>

                        @*<div style="width:100%; float:left;">
                                <label class="control-label">Αντιστάθμιση ώρας(λεπτά)</label>&nbsp
                                <div class="input-group">
                                    <input type="number" class="form-control filterOffsetMinutes" id="OffsetMinutes">
                                </div>
                            </div>*@
                        <input type="number" class="form-control filterOffsetMinutes" id="OffsetMinutes" style="display:none;">

                    </div>
                </div>

            </div>
        </div>
    </div>
    <div class="col-md-3"> </div>
</div>


<div class="row">
    <div class="col-md-12">
        <div class="box box-danger" style="margin-top:5%;">
            <div class="box-header">
                <h3 class="box-title">@ViewData["Title"]</h3>
            </div>
            <hr />
            <div class="box-body table-responsive">
                <table id="EmployeesWorkHourDifferenceDatatable" class="table table-bordered table-hover table-responsive stripe">
                    <thead>
                        <tr>
                            <th></th>
                            <th>Επίθετο</th>
                            <th>Όνομα</th>
                            <th>ΑΦΜ</th>
                            <th>Πόστο</th>
                            <th>Βάρδια χρονογράμματος</th>
                            <th>Βάρδια πραγματική</th>
                        </tr>
                    </thead>
                    <tfoot>
                        <tr>
                            <th></th>
                            <th>Επίθετο</th>
                            <th>Όνομα</th>
                            <th>ΑΦΜ</th>
                            <th>Πόστο</th>
                            <th>Βάρδια Χρονογράμματος</th>
                            <th>Βάρδια πραγματική</th>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        const ConvertDateForApi = timeStamp =>
            CompleteTimeWithZerosForApiPost(new Date(parseInt(timeStamp)));

        CompleteTimeWithZerosForApiPost = date => {
            var year = date.getFullYear();
            var month = String((date.getMonth() + 1)).length == 1 ?
                '0' + (date.getMonth() + 1) : (date.getMonth() + 1);
            var day = String(date.getDate()).length == 1 ?
                '0' + date.getDate() : date.getDate();
            var hour = String(date.getHours()).length == 1 ?
                '0' + date.getHours() : date.getHours();
            var min = String(date.getMinutes()).length == 1 ?
                '0' + date.getMinutes() : date.getMinutes();

            return year + '-' + month + '-' + day + 'T' + hour + ':' + min;
        }




        const GetSelectedWorkPlaceId = () =>
            document.getElementById('WorkPlace_Select2').value;

        const GetSliderWorkHourValue = () =>
            document.getElementById('SliderWorkHour').checked == true;

        const GetSliderRealWorkHourValue = () =>
            document.getElementById('SliderRealWorkHour').checked == true;

        const GetOffsetMinutesValue = () =>
            document.getElementById('OffsetMinutes').value;

        const GetStartOn = () => ConvertDateForApi(moment(document.getElementById('SearchRangeInput').value
            .split('/-/')[0], 'DD/MM/YYYY').valueOf());

        const GetEndOn = () =>
            ConvertDateForApi(new Date(moment(document.getElementById('SearchRangeInput').value
                .split('/-/')[0], 'DD/MM/YYYY').valueOf()).setHours(23, 59, 59).valueOf());


        const setHoursToMax = date => {
            var newDate = new Date(date);
            newDate.setHours(23, 59, 59);
            return moment(newDate);
        }
    </script>
    <script>
        $('#WorkPlace_Select2').select2({
            placeholder: "Επέλεξε πόστο",
            allowClear: true,
            ajax: {
                url: '/api/workplaces/select2',
                data: function (params) {
                    var query = {
                        search: params.term,
                        page: params.page || 1
                    }
                    return query;
                }
            }
        }).on('change', () =>
            $('#EmployeesWorkHourDifferenceDatatable').DataTable().ajax.reload());

        $('#SliderWorkHour').bootstrapToggle({
            on: '',
            off: ''
        });

        $('#SliderRealWorkHour').bootstrapToggle({
            on: '',
            off: ''
        });

        $('.filterSlider').change(e =>
            $('#EmployeesWorkHourDifferenceDatatable').DataTable().ajax.reload());

        $('.filterOffsetMinutes').change(e =>
            $('#EmployeesWorkHourDifferenceDatatable').DataTable().ajax.reload());

        $('#SearchRangeInput').calentim({
            showTimePickers: false,
            startOnMonday: true,
            showFooter: false,
            calendarCount: 1,
            format: "DD/MM/YYYY",
            dateSeparator: '/-/',
            locale: "el",
            onafterselect: () =>
                $('#EmployeesWorkHourDifferenceDatatable').DataTable().ajax.reload(),
            onaftershow: () =>
                //Fix Calentim width
                [...document.getElementsByClassName('calentim-input')]
                    .forEach((calentim) =>
                        calentim.setAttribute('style', 'width: 400px;'))
        });

        var table = new DataTableService('#EmployeesWorkHourDifferenceDatatable')
            .ForApiController('projections')
            .StartOrderFromCol(1)
            .AddColumn(false, false, "", (a, b, data, d) => '<button type="button" id="DetailsButtonNum_' + data.Id + '" class="btn  btn-success DetailsButton"><i class="fa fa-plus"></i></button>')
            .AddColumn(true, true, "LastName")
            .AddColumn(true, true, "FirstName")
            .AddColumn(true, true, "VatNumber")
            .AddColumn(false, false, "WorkPlaceTitle")
            .AddColumn(false, false, "WorkHourDate")
            .AddColumn(false, false, "RealWorkHourDate")
            .FixedLeftColums(2)
            .AjaxData((data, type, row, meta) => {
                data.predicate = 'ProjectionDifference';
                if (GetSelectedWorkPlaceId() != '')
                    data.filterByWorkPlaceId = GetSelectedWorkPlaceId();
                data.StartOn = GetStartOn();
                data.EndOn = GetEndOn();
                data.filterByWorkHour = GetSliderWorkHourValue();
                data.filterByRealWorkHour = GetSliderRealWorkHourValue();
                data.filterByOffsetMinutes = GetOffsetMinutesValue();
                return JSON.stringify(data);
            })
            .CompleteDataTable();

        // Add event listener for opening and closing details
        $('#EmployeesWorkHourDifferenceDatatable tbody').on('click', 'td.details-control', function () {
            var tr = $(this).closest('tr');
            var row = table.row(tr);

            if (row.child.isShown()) {
                // This row is already open - close it
                row.child.hide();
                tr.removeClass('shown');
            }
            else {
                // Open this row
                row.child(format(row.data())).show();
                tr.addClass('shown');
            }
        });

        const SetDetailsButtonOn = id => {
            var detailButton = document.getElementById('DetailsButtonNum_' + id);
            detailButton.classList.remove('btn-success');
            detailButton.firstElementChild.classList.remove('fa-plus');

            detailButton.classList.add('btn-danger');
            detailButton.firstElementChild.classList.add('fa-minus');
        }

        const SetDetailsButtonOff = id => {
            var detailButton = document.getElementById('DetailsButtonNum_' + id);
            detailButton.classList.remove('btn-danger');
            detailButton.firstElementChild.classList.remove('fa-minus');

            detailButton.classList.add('btn-success');
            detailButton.firstElementChild.classList.add('fa-plus');
        }

        function format(data) {
            console.log(data);
            var html = '<p>Συνολικά προβλήματα υπαλλήλου</p>' +
                '<div style="width:100%">' +
                '<div style="float:left; width:50% ">' +
                '<table cellpadding = "5" cellspacing = "0" border = "0" style = "padding-left:50px;" > ';

            data.WorkHours.forEach(workHour => html += GetWorkHourRows(workHour));
            html += '</table>' +
                '</div>' +
                '<div style="float:left; width:50%">' +
                '<table cellpadding = "5" cellspacing = "0" border = "0" style = "padding-left:50px;" > ';
            data.RealWorkHours.forEach(realWorkHour => html += GetRealWorkHourRows(realWorkHour));

            '</table>' +
                '</div>' +
                '</div>';
            return html;
        }

        const GetWorkHourRows = dateObj => '<tr>' +
            '<td>Χρονόγραμα:</td>' +
            '<td>' + dateObj.startOn + '</td>' +
            '<td>' + dateObj.endOn + '</td>' +
            '</tr>';

        const GetRealWorkHourRows = dateObj => '<tr>' +
            '<td>Πραγματική:</td>' +
            '<td>' + dateObj.startOn + '</td>' +
            '<td>' + dateObj.endOn + '</td>' +
            '</tr>';

    </script>
}
