@model DataAccess.ViewModels.WorkPlaceHourRestrictionEdit


<div class="row">
    <div class="col-md-2"> </div>
    <div class="col-md-8">

        <div class="box box-danger" style="margin-top:5%;">

            <div class="box-header">
                <h3 class="box-title">@ViewData["Title"]</h3>
                <div class="pull-right">
                    @Html.ButtonBackToList("RealWorkHour")
                </div>
            </div>

            <hr />

            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <input type="hidden" asp-for="DaysInMonth" />
            <input type="hidden" asp-for="CreatedBy_Id" />

            <div class="box-body">
                @if (Model.WorkPlace != null)
                {
    <div class="form-group">
        <label asp-for="WorkPlaceId" class="control-label"></label>
        <div class="input-group">
            <input asp-for="WorkPlace.Title" class="form-control" readonly disabled />
        </div>
    </div>}

                <div class="form-group">
                    <label asp-for="Month" class="control-label"></label>
                    <div class="input-group" style="width:30%">
                        <input asp-for="Month" id="Month" class="form-control" readonly disabled />
                    </div>
                </div>

                <div class="form-group">
                    <label asp-for="Year" class="control-label"></label>
                    <div class="input-group" style="width:30%">
                        <input asp-for="Year" id="Year" class="form-control" readonly disabled />
                    </div>
                </div>

                <div class="form-group">
                    <label asp-for="CreatedBy_FullName" class="control-label"></label>
                    <div class="input-group">
                        <input asp-for="CreatedBy_FullName" class="form-control" readonly disabled />
                    </div>
                </div>

                <div class="form-group">
                    <label asp-for="CreatedOn" class="control-label"></label>
                    <div class="input-group">
                        <input asp-for="CreatedOn" class="form-control" readonly disabled />
                    </div>
                </div>

                <div id="DaysDiv"></div>
            </div>
        </div>
    </div>
    <div class="col-md-2"> </div>
</div>


@section Scripts {

    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <!--///////////////////////////////////////-->
    <!--///             Events              ///-->
    <!--///////////////////////////////////////-->
    <script>
        $(document).ready(() => {
            var hourRestrictions = @(Html.Raw(Json.Serialize(Model.HourRestrictions)));
            var month = document.getElementById('Month').value;
            var year = document.getElementById('Year').value;

            console.log(hourRestrictions);
            document.getElementById('DaysDiv').innerHTML = '';
            AppendMonthDaysHtml(year, month, hourRestrictions);
            HandleSubmitButton();
        })


        //Add or Substruct button
        $('body').on('click', '.TimeButton', (e) => {
            console.log(e.target.id);
            var num = e.target.id.split('_')[1];   //i
            var action = e.target.id.split('_')[2];//Add - Substruct
            var type = e.target.id.split('_')[3];  //Minutes - Hours
            var value = e.target.id.split('_')[4]; // 5 - 10 - 1 - 2

            window[action + type](num, value);
        })
    </script>
    <!--///////////////////////////////////////-->
    <!--///             Libraries           ///-->
    <!--///////////////////////////////////////-->
    <script>
        $('.WorkPlace_Select2').select2({
            ajax: {
                url: '/api/workplaces/select2',
                data: params => {
                    var query = {
                        search: params.term,
                        page: params.page || 1
                    }
                    return query;
                }
            }
        }).change(() => HandleSubmitButton());

    </script>

    <!--///////////////////////////////////////-->
    <!--///             Handlers            ///-->
    <!--///////////////////////////////////////-->
    <script>
        const HandleSubmitButton = () => {
            var isOkToShow = true;

            if (document.getElementById('WorkPlaceId').value == '')
                isOkToShow = false;

            if (isOkToShow)
                document.getElementById('SubmitButton').disabled = false;
            else
                document.getElementById('SubmitButton').disabled = true;
        }
    </script>

    <!--///////////////////////////////////////-->
    <!--///             Functions           ///-->
    <!--///////////////////////////////////////-->
    <script>
        var getDaysInMonth = (year, month) =>
            new Date(year, month, 0).getDate();

        const NumberOfDigits = x =>
            (Math.log10((x ^ (x >> 31)) - (x >> 31)) | 0) + 1;


        const SetInputMaxHourValue = (num, value) =>
            document.getElementById('HourRestrictions[' + num + '].MaxTime')
                .value = value;

        const GetInputMaxHourValue = (num) =>
            document.getElementById('HourRestrictions[' + num + '].MaxTime')
                .value;

        const GetDateValueFromMVC = (day, hourRestrictions) =>
            [...hourRestrictions]
                .filter(restriction => restriction.day == day)
                .map(restriction =>
                    restriction.maxTime.split(':')[0] +
                    ':' +
                    restriction.maxTime.split(':')[1])[0];

        const GetIdValueFromMVC = (day, hourRestrictions) =>
            [...hourRestrictions]
                .filter(restriction => restriction.day == day)
                .map(restriction => restriction.id)[0];

        const AppendMonthDaysHtml = (year, month, hourRestrictions) => {

            document.getElementById('DaysDiv')
                .insertAdjacentHTML('beforeend', GetDaysHtml(year, month, hourRestrictions));

            //Clear cuurrent validations
            $("form").removeData("validator").removeData("unobtrusiveValidation");
            //Parse the form again
            $.validator.unobtrusive.parse($("form"));
        }

        const GetDaysHtml = (year, month, hourRestrictions) => {
            var returnStr = '';
            for (var i = 0; i < getDaysInMonth(year, month); i++) {
                var day = i;
                var currentDate = new Date(year, month - 1, ++day);
                var options = { weekday: 'long', day: 'numeric' };

                returnStr +=
                    '<div class="form-group " style="width:100% top:10px;">' +
                    '<div class="input-group" style="width:30%;">' +
                    '<label class="control-label">' + currentDate.toLocaleString('el-GR', options) + '</label>' +
                    '<input type="number" name="HourRestrictions[' + i + '].Id"  class="form-control" style="display:none;" value="' + GetIdValueFromMVC(day, hourRestrictions) + '" readonly />' +
                    '<input type="number" name="HourRestrictions[' + i + '].Day"  class="form-control" style="display:none;" value="' + day + '" readonly />' +
                    '<input type="text" ' +
                    'data-val="true" ' +
                    'data-val-regex="Ο τύπος ώρας πρέπει να ειναι της μορφής ΗΗ:ΜΜ" ' +
                    'data-val-regex-pattern="^([0-9]{1}[0-9]{1}):[0-5]{1}[0-9]{1}$" ' +
                    'data-val-required="Η ώρα απαιτείται" ' +
                    'aria-invalid="true" ' +
                    'id="HourRestrictions[' + i + '].MaxTime" name="HourRestrictions[' + i + '].MaxTime"  class="form-control" value="' + GetDateValueFromMVC(day, hourRestrictions) + '" readonly />' +

                    '</br>' +
                    '<span class="text-danger field-validation-error" data-valmsg-for="HourRestrictions[' + i + '].MaxTime" data-valmsg-replace="true"></span>' +
                    '</div>' +
                    '</div>';

            }
            return returnStr;
        }

        //Functions bellow will be called from window via string function name

        function AddMinutes(num, value) {
            value = parseInt(value);
            var currTime;
            var hour = parseInt(GetInputMaxHourValue(num).split(':')[0]);
            var minute = parseInt(GetInputMaxHourValue(num).split(':')[1]);

            if (minute + value < 60)
                minute = minute + value;
            else {
                minute = (minute - 60) + value;
                hour++;
            }

            if (NumberOfDigits(minute) == 1)
                minute = '0' + minute;
            if (NumberOfDigits(hour) == 1)
                hour = '0' + hour;

            currTime = hour + ':' + minute;
            SetInputMaxHourValue(num, currTime);
        }

        function SubstructMinutes(num, value) {
            value = parseInt(value);
            var currTime;
            var hour = parseInt(GetInputMaxHourValue(num).split(':')[0]);
            var minute = parseInt(GetInputMaxHourValue(num).split(':')[1]);

            if (Math.sign(minute - value) >= 0)//1 = Positive, -1 = Negative
                minute = minute - value;
            else if (hour != 0) {
                minute = (minute + 60) - value;
                hour--;
            }

            if (NumberOfDigits(minute) == 1)
                minute = '0' + minute;
            if (NumberOfDigits(hour) == 1)
                hour = '0' + hour;

            currTime = hour + ':' + minute;
            SetInputMaxHourValue(num, currTime);
        }

        function AddHours(num, value) {
            value = parseInt(value);
            var currTime;
            var hour = parseInt(GetInputMaxHourValue(num).split(':')[0]);
            var minute = parseInt(GetInputMaxHourValue(num).split(':')[1]);


            hour = hour + value;

            if (NumberOfDigits(minute) == 1)
                minute = '0' + minute;
            if (NumberOfDigits(hour) == 1)
                hour = '0' + hour;

            currTime = hour + ':' + minute;
            SetInputMaxHourValue(num, currTime);
        }

        function SubstructHours(num, value) {
            value = parseInt(value);
            var currTime;
            var hour = parseInt(GetInputMaxHourValue(num).split(':')[0]);
            var minute = parseInt(GetInputMaxHourValue(num).split(':')[1]);

            if (Math.sign(hour - value) >= 0)//1 = Positive, -1 = Negative
                hour = hour - value;

            if (NumberOfDigits(minute) == 1)
                minute = '0' + minute;
            if (NumberOfDigits(hour) == 1)
                hour = '0' + hour;

            currTime = hour + ':' + minute;
            SetInputMaxHourValue(num, currTime);
        }

    </script>
}
