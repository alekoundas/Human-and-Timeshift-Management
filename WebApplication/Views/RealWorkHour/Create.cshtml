@model DataAccess.ViewModels.RealWorkHours.RealWorkHourCreateViewModel

@{ Layout = "~/Views/Shared/_Layout.cshtml"; }

<div class="row">
    <div class="col-md-2"> </div>
    <div class="col-md-8">

        <div class="box box-danger" style="margin-top:5%;">

            <div class="box-header">
                <h3 class="box-title">@ViewData["Title"]</h3>
                <div class="pull-right">
                    @Html.ButtonBackToList("RealWorkHour")
                </div>
            </div>

            <hr />

            <form asp-controller="RealWorkHour" asp-action="Create" method="post">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <input asp-for="StartOn" id="StartOn" class="TimePicker form-control" style="display:none;" />
                <input asp-for="EndOn" id="EndOn" class="TimePicker form-control" style="display:none;" />
                <div class="box-body">

                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">
                                <label class="control-label">Πόστο</label>
                                <div class="input-group" style="width:100%">
                                    <select class="TimeShift_Select2" asp-for="TimeShiftId" style="width:70%"></select>
                                    <span asp-validation-for="TimeShiftId" class="text-danger"></span>
                                    <span style="display:none;" id="TimeShiftWarningSpan" class="text-warning">   </span>

                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group" id="TimeRangeDiv" style="display:none;">
                                <input id="TimeRange" />
                            </div>
                            </br>
                            <span id="TimeRangeSpan" style="display:none;" class="text-warning"></span>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-12">
                            <label asp-for="Comments" class="control-label"></label>
                            <div class="form-group" id="CommentsDiv" style="display:none;">
                                <textarea asp-for="Comments" class="form-control" style="resize: vertical;max-width:50%"></textarea>
                            </div>
                        </div>
                    </div>


                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group" id="EmployeesDiv" style="display:none;">
                                <label asp-for="Employees" class="control-label"></label>
                                <div class="input-group" style="width:100%">
                                    <div class="row">
                                        <div class="col-md-1"></div>
                                        <div class="col-md-2">
                                            <button type="button" id="AppendEmployeeForm" class="btn btn-success "><i class="fa fa-user"></i><i class="fa fa-plus"></i></button>
                                        </div>
                                        <div class="col-md-10">Προσθήκη επιπλέων υπαλλήλου</div>
                                    </div>
                                    <div id="EmployeeInput" style="width:100%"></div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <input type="submit" id="SubmitButton" value="Υποβολή βάρδιας" class="btn btn-primary" disabled />
                    </div>
                </div>
            </form>

        </div>
    </div>
    <div class="col-md-2"> </div>
</div>



@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}


    <!-- Dtos-->
    <script>
        const BuildHasOverlapWorkHourDto = (startDate, endDate) => ({
            timeShiftId: document.getElementById('TimeShiftId').value,
            startOn: TimeConverter(startDate),
            endOn: TimeConverter(endDate)
        });
        const BuildValidateWorkHourDto = (startDate, endDate, employeeIds) => ({
            employeeIds: employeeIds,
            startOn: TimeConverter(startDate),
            endOn: TimeConverter(endDate),
            timeShiftId: document.getElementById('TimeShiftId').value //for "belongs" only
        });
        const BuildSelect2Dto = (params) => ({
            timeShiftId: document.getElementById('TimeShiftId').value,
            search: params.term,
            page: params.page || 1,
            existingIds: GetAlreadyAppendedEmployeeIds()
        });
    </script>

    <!--///////////////////////////////////////-->
    <!--///             Handlers            ///-->
    <!--///////////////////////////////////////-->
    <script>
        const HandleSubmitButton = () => {
            [...document.getElementsByClassName('EmployeeSelect2ErrorSpan')]
                .filter(span => span.style.display == '').length > 0 ?
                HideSaveButton() : ShowSaveButton();

        }

        const HandleTimeRangeSpan = (response) => {
            if (response != undefined) {
                var span = document.getElementById('TimeRangeSpan');
                span.style.display = '';
                span.classList = [];
                span.classList.add('text-' + response.type);
                span.innerHTML = '</br>' + response.value;
            }
            else
                document.getElementById('TimeRangeSpan').style.display = 'none';
        };

        const HandleEmployeeSelect2Span = response => {
            if (response != undefined) {

                var num = GetSelect2NumBySelectedEmployeeId(response.employeeId);

                var errorSpan = document
                    .getElementById('EmployeesSelect2ErrorSpanNum_' + num);

                var warningSpan = document.
                    getElementById('EmployeesSelect2WarningSpanNum_' + num);

                if (response.errorType == 'error') {

                    errorSpan.innerHTML = response.errorValue;
                    errorSpan.style.display = '';
                }
                else if (response.errorType == 'warning') {
                    if (!warningSpan.innerHTML.includes(response.errorValue)) {
                        warningSpan.innerHTML += response.errorValue;
                        warningSpan.style.display = '';
                    }
                }
            }
            else {

                [...document.getElementsByClassName('EmployeeSelect2ErrorSpan')]
                    .forEach(span => {
                        span.style.display = 'none';
                        span.innerHTML = '';
                    });
                [...document.getElementsByClassName('EmployeeSelect2WarningSpan')]
                    .forEach(span => {
                        span.style.display = 'none';
                        span.innerHTML = '';
                    });
            }
        };

        const HandleTimeShiftSpan = response => {
            var warningSpan = document.getElementById('TimeShiftWarningSpan');

            if (response != undefined)
                if (response.errorType == 'warning')
                    if (!warningSpan.innerHTML.includes(response.errorValue)) {
                        warningSpan.innerHTML = response.errorValue;
                        warningSpan.style.display = '';
                    }


        };


    </script>

    <!--///////////////////////////////////////-->
    <!--///             Validation          ///-->
    <!--///////////////////////////////////////-->
    <script>
        const ValidateEmployeesWithRangeToRealWorkhour = () => {
            var startOn = document.getElementById('StartOn').value;
            var endOn = document.getElementById('EndOn').value;
            var employeeIds = GetAlreadyAppendedEmployeeIds();

            $.ajax({
                type: "POST",
                url: '/api/realworkhours/hasoverlap',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: JSON.stringify(
                    BuildValidateWorkHourDto(startOn, endOn, employeeIds))
            }).done((data) => {
                ShowResultPerEmployeeDropdown(data);
                HandleSubmitButton();
            });
        };

        const ValidateEmployeesWithRangeToWorkHour = () => {
            var startOn = document.getElementById('StartOn').value;
            var endOn = document.getElementById('EndOn').value;
            var employeeIds = GetAlreadyAppendedEmployeeIds();

            $.ajax({
                type: "POST",
                url: '/api/workhours/employeebelongstoworkhour',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: JSON.stringify(
                    BuildValidateWorkHourDto(startOn, endOn, employeeIds))
            }).done((data) => {
                ShowResultPerEmployeeDropdown(data);
                HandleSubmitButton();
            });
        };

        const ValidateEmployeesWithRestrictionMaxHours = () => {
            var startOn = document.getElementById('StartOn').value;
            var endOn = document.getElementById('EndOn').value;
            var employeeIds = GetAlreadyAppendedEmployeeIds();

            $.ajax({
                type: "POST",
                url: '/api/WorkPlaceHourRestrictions/ValidateHoursToWorkPlaceHourRestriction',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: JSON.stringify(
                    BuildValidateWorkHourDto(startOn, endOn, employeeIds))
            }).done((data) => {
                HandleTimeShiftSpan(data);
                HandleSubmitButton();
            });
        };
    </script>

    <!--///////////////////////////////////////-->
    <!--///             Functions           ///-->
    <!--///////////////////////////////////////-->

    <script>
        const TimeConverter = (ticks, hasLaterDate) => {
            var date = new Date(ticks);
            var year = date.getFullYear();
            var month = String((date.getMonth() + 1)).length == 1 ?
                '0' + (date.getMonth() + 1) : (date.getMonth() + 1);
            var day = String(date.getDate()).length == 1 ?
                '0' + date.getDate() : date.getDate();
            var hour = String(date.getHours()).length == 1 ?
                '0' + date.getHours() : date.getHours();
            var min = String(date.getMinutes()).length == 1 ?
                '0' + date.getMinutes() : date.getMinutes();
            if (hasLaterDate)
                var day = String(date.getDate() + 1).length == 1 ?
                    '0' + (date.getDate() + 1) : date.getDate() + 1;

            var time = year + '-' + month + '-' + day + 'T' + hour + ':' + min;
            return time;
        }

        const GetSelect2NumBySelectedEmployeeId = employeeId =>
            [...document.getElementsByClassName('EmployeeSelect2ErrorSpan')]
                .filter(span =>
                    GetSelect2ValueByNum(span.id.split('_')[1]) == employeeId)[0]
                .id.split('_')[1];

        const GetAlreadyAppendedEmployeeIds = () =>
            [...document.getElementsByClassName('EmployeesSelect2')]
                .map((data) => data.value)
                .filter((val) => val != "");

        const HideSaveButton = () => {
            var button = document.getElementById('SubmitButton');
            button.style.opacity = '0.5';
            button.disabled = true;

        }

        const GetSelect2ValueByNum = num =>
            document.getElementById('EmployeesSelect2Num_' + num).value;

        const ShowSaveButton = () => {
            var button = document.getElementById('SubmitButton');
            button.style.opacity = '1';
            button.disabled = false;

        }


        const ShowResultPerEmployeeDropdown = responses =>
            responses.forEach(response =>
                HandleEmployeeSelect2Span(response));

        const AppendDateRangeToDateInputs = (startDate, endDate, hasLaterDate) => {
            document.getElementById('StartOn').value = TimeConverter(startDate);
            document.getElementById('EndOn').value = TimeConverter(endDate, hasLaterDate);
        };
    </script>

    <!--///////////////////////////////////////-->
    <!--///             Libraries           ///-->
    <!--///////////////////////////////////////-->
    <script>


        var OnGoingTimeChanges = 0;
        $("#TimeRange").calentim({
            inline: true,
            showCalendars: false,
            hourFormat: 24,
            minuteSteps: 15,
            locale: "el",
            format: "hh:mm",
            ontimechange: (calentim, startDate, endDate) => {
                OnGoingTimeChanges++;
                var hasLaterDate = 0;
                if (startDate > endDate)
                    hasLaterDate = 1;

                setTimeout(() => {
                    OnGoingTimeChanges--;

                    if (OnGoingTimeChanges == 0)
                        $.ajax({
                            type: "POST",
                            url: '/api/workhours/hasoverlap',
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            data: JSON.stringify(
                                BuildHasOverlapWorkHourDto(startDate, endDate))
                        }).done((data) => {
                            HandleTimeShiftSpan();
                            HandleEmployeeSelect2Span();
                            AppendDateRangeToDateInputs(startDate, endDate, hasLaterDate);
                            HandleTimeRangeSpan(data);
                            ValidateEmployeesWithRangeToRealWorkhour();
                            ValidateEmployeesWithRangeToWorkHour();
                            ValidateEmployeesWithRestrictionMaxHours();
                        });

                }, 800);

                HandleTimeRangeSpan();
            }
        });

        //Employees Select2
        const EmployeeSelect2 = (num) => {
            $('#EmployeesSelect2Num_' + num).select2({
                ajax: {
                    type: "POST",
                    url: '/api/employees/select2',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: (params) => JSON.stringify(BuildSelect2Dto(params))
                }
            }).on('change', (e) => {
                HandleEmployeeSelect2Span();
                HandleTimeShiftSpan();
                ValidateEmployeesWithRangeToRealWorkhour();
                ValidateEmployeesWithRestrictionMaxHours();
                ValidateEmployeesWithRangeToWorkHour();
                HandleSubmitButton();
            });
        }

        //TimeShift Select2
        $('.TimeShift_Select2').select2({
            ajax: {
                url: '/api/timeshifts/select2',
                data: (params) => ({
                    predicate: "RealWorkHourCreate",
                    search: params.term,
                    page: params.page || 1
                })
            }
        }).on('change', (e) => {
            if (e.target.value != "") {
                document.getElementById('EmployeesDiv').style = 'display:;';
                document.getElementById('TimeRangeDiv').style = 'display:;';
                document.getElementById('CommentsDiv').style = 'display:;';
            }
            else {
                document.getElementById('EmployeesDiv').style = 'display:none;';
                document.getElementById('TimeRangeDiv').style = 'display:none;';
                document.getElementById('CommentsDiv').style = 'display:none;';
            }
        });
    </script>



    <!-- Show - Hide employees div-->
    <script>

        //Append employee Select2
        var Count = 0;
        $('#AppendEmployeeForm').on('click', (e) => {

            document.getElementById('EmployeeInput').insertAdjacentHTML('beforeend',
                '<div class="row" id = "EmployeeRowNum_' + Count + '">' +
                '<div style="width: 100%;">' +
                '<div style="width: 15%; float: left;">&nbsp;</div>' +
                '<div style="width: 50%; float: left;">' +
                '<select class="EmployeesSelect2" id="EmployeesSelect2Num_' + Count + '" name="Employees[' + Count + ']" style="width:100%">   </select>' +
                '<span style="display:none;" id="EmployeesSelect2ErrorSpanNum_' + Count + '" class="text-danger EmployeeSelect2ErrorSpan">     </span>' +
                '<span style="display:none;" id="EmployeesSelect2WarningSpanNum_' + Count + '" class="text-warning EmployeeSelect2WarningSpan">   </span>' +
                '</div>' +
                '<div style="width: 5%; float: left;">&nbsp;</div>' +
                '<div style="width: 10%; float: left;">' +
                '<button type = "button"  class="btn btn-danger DeleteEmployeeSelect2" id="' + Count + '"> <i class="fa fa-user" id="' + Count + '"></i></button >' +
                '</div >' +
                '</div >' +
                '</div>'
            );
            EmployeeSelect2(Count);
            Count++;
        });

        // Delete employee Select2
        $('#EmployeeInput').on('click', '.DeleteEmployeeSelect2', (e) => {

            document.getElementById('EmployeeRowNum_' + e.target.id).remove();
            HandleSubmitButton();
        });

    </script>



}
