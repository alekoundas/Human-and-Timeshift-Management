@model DataAccess.ViewModels.RealWorkHours.RealWorkHourCreateViewModel

@{
    ViewData["Title"] = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row">
    <div class="col-md-2"> </div>
    <div class="col-md-8">

        <div class="box box-danger" style="margin-top:5%;">

            <div class="box-header">
                <h3 class="box-title">@ViewData["Title"]</h3>
                <div class="pull-right">
                    <button asp-action="Index" class="btn btn-primary">Πίσω στην λίστα</button>
                </div>
            </div>

            <hr />

            <form asp-controller="RealWorkHour" asp-action="Create" method="post">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <input asp-for="StartOn" id="StartOn" class="TimePicker form-control" style="display:none;" />
                <input asp-for="EndOn" id="EndOn" class="TimePicker form-control" style="display:none;" />
                <div class="box-body">

                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">
                                <label asp-for="TimeShiftId" class="control-label"></label>
                                <div class="input-group" style="width:100%">
                                    <select class="TimeShift_Select2" asp-for="TimeShiftId" style="width:70%"></select>
                                    <span asp-validation-for="TimeShiftId" class="text-danger"></span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-12">

                            <div class="form-group" id="TimeRangeDiv" style="display:none;">
                                <input id="TimeRange" />
                                <br>
                                <span id="TimeRangeSpan" style="display:none;" class="text-warning"></span>
                            </div>
                        </div>
                    </div>


                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group" id="EmployeesDiv" style="display:none;">
                                <label asp-for="Employees" class="control-label"></label>
                                <div class="input-group" style="width:100%">
                                    <div class="row">
                                        <div class="col-md-1"></div>
                                        <div class="col-md-1">
                                            <button type="button" onclick="AppendEmployeeForm()" class="btn btn-success btn-circle"><i class="fa fa-user"></i><i class="fa fa-plus"></i></button>
                                        </div>
                                        <div class="col-md-10">Προσθήκη επιπλέων υπαλλήλου</div>
                                    </div>
                                    <div id="EmployeeInput" style="width:100%"></div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <input type="submit" id="SubmitButton" value="Υποβολή βάρδιας" class="btn btn-default" disabled />
                    </div>
                </div>
            </form>

        </div>
    </div>
    <div class="col-md-2"> </div>
</div>


<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}


    <!-- Dtos-->
    <script>
        const BuildHasOverlapWorkHourDto = (startDate, endDate) => ({
            timeShiftId: document.getElementById('TimeShiftId').value,
            startOn: TimeConverter(startDate),
            endOn: TimeConverter(endDate)
        });
        const BuildHasOverlapRealWorkHourDto = (startDate, endDate, employeeIds) => ({
            employeeIds: employeeIds,
            startOn: TimeConverter(startDate),
            endOn: TimeConverter(endDate)
        });
        const BuildSelect2Dto = (params) => ({
            timeShiftId: document.getElementById('TimeShiftId').value,
            search: params.term,
            page: params.page || 1,
            existingEmployees: GetAlreadyAppendedEmployeeIds()
        });
    </script>

    <!--///////////////////////////////////////-->
    <!--///             Handlers            ///-->
    <!--///////////////////////////////////////-->
    <script>
        //Submit button handler
        const HandleSubmitButton = (responses) => {
            if (responses == undefined) {
                var startOn = document.getElementById('StartOn').value;
                var endOn = document.getElementById('EndOn').value;
                var employeeSelect2CurrentErrorCount = 0
                var employeeIds = GetAlreadyAppendedEmployeeIds();
                employeeIds.forEach(id => {
                    if (window.getComputedStyle(
                        document.getElementById('EmployeesSelect2SpanNum_' + GetSelect2NumBySelectedEmployeeId(id)))
                        .display !== "none")
                        employeeSelect2CurrentErrorCount++;
                })

                //Check if we have selected employees
                if (employeeSelect2CurrentErrorCount == 0 &&
                    employeeIds.length > 0 && startOn != '' && endOn != '')
                    document.getElementById('SubmitButton').disabled = false;
                else
                    document.getElementById('SubmitButton').disabled = true;
            }
            else {
                var errorCount = 0;
                responses.forEach((response) =>
                    !response.isSuccessful ? errorCount++ : errorCount);

                if (errorCount > 0 || responses.length == 0)
                    document.getElementById('SubmitButton').disabled = true;
                else
                    //if (GetAlreadyAppendedEmployeeIds().length > 0)
                    document.getElementById('SubmitButton').disabled = false;
            }
        }

        // Employee Select2 span handler
        const HandleEmployeeSelect2Span = (elementId, value, isSuccessful) => {
            if (elementId != undefined) {
                var span = document.getElementById(elementId)
                if (isSuccessful) {
                    span.style = "display:none;";
                }
                else {
                    span.style = "display:;";
                    span.innerHTML = value;
                }
            }
            else
                [...document.getElementsByClassName('EmployeeSelect2Span')]
                    .forEach((span) => span.style = "display:none;");
        }

        // Time range calentim span handler
        const HandleTimeRangeSpan = (response) => {
            if (response != undefined) {
                var span = document.getElementById('TimeRangeSpan');
                span.style.display = '';
                span.classList = [];
                span.classList.add('text-' + response.type);
                span.innerHTML = response.value;
            }
            else
                document.getElementById('TimeRangeSpan').style.display = 'none';
        };
    </script>

    <!-- Get Select2 number by employeeId -->
    <script>
        const GetSelect2NumBySelectedEmployeeId = (employeeId) => document
            .querySelectorAll('select.EmployeesSelect2 > option[value="' + employeeId + '"]')[0]
            .parentElement.id
            .split('[')[1]
            .split(']')[0]
    </script>

    <!-- Get appended employees ids -->
    <script>
        const GetAlreadyAppendedEmployeeIds = () =>
            [...document.getElementsByClassName('EmployeesSelect2')]
                .map((data) => data.value)
                .filter((val) => val != "");
    </script>

    <!-- Api Validation -->
    <script>
        const ValidateEmployeesWithRangeToRealWorkhour = () => {
            var startOn = document.getElementById('StartOn').value;
            var endOn = document.getElementById('EndOn').value;
            var employeeIds = GetAlreadyAppendedEmployeeIds();

            $.ajax({
                type: "POST",
                url: '/api/realworkhours/hasoverlap',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: JSON.stringify(
                    BuildHasOverlapRealWorkHourDto(startOn, endOn, employeeIds))
            }).done((data) => {
                ShowResultPerEmployeeDropdown(data);
                HandleSubmitButton(data);
            });
        };
    </script>

    <!-- TimeShift Select2-->
    <script>
        $('.TimeShift_Select2').select2({
            ajax: {
                url: '/api/timeshifts/select2',
                data: (params) => ({
                    search: params.term,
                    page: params.page || 1
                })
            }
        });
    </script>

    <!-- Handle the api response errors to show in spans-->
    <script>
        const ShowResultPerEmployeeDropdown = (responses) =>
            responses.forEach((response) =>
                HandleEmployeeSelect2Span(
                    'EmployeesSelect2SpanNum_' + GetSelect2NumBySelectedEmployeeId(response.employeeId),
                    response.value,
                    response.isSuccessful)
            );

    </script>

    <!-- Set DateRange to hidden date inputs -->
    <script>
        const AppendDateRangeToDateInputs = (startDate, endDate, hasLaterDate) => {
            document.getElementById('StartOn').value = TimeConverter(startDate);
            document.getElementById('EndOn').value = TimeConverter(endDate, hasLaterDate);
        };
    </script>

    <!-- Employees Select2-->
    <script>

        const EmployeeSelect2 = (num) => {
            $('.EmployeesSelect2Num_' + num).select2({
                ajax: {
                    type: "POST",
                    url: '/api/employees/select2',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: (params) => JSON.stringify(BuildSelect2Dto(params))
                }
            }).on('change', (e) => {
                ValidateEmployeesWithRangeToRealWorkhour();
                HandleSubmitButton();
            });
        }
    </script>

    <!-- Calentim -->
    <script>
        const TimeConverter = (ticks, hasLaterDate) => {
            var date = new Date(ticks);
            var year = date.getFullYear();
            var month = String((date.getMonth() + 1)).length == 1 ?
                '0' + (date.getMonth() + 1) : (date.getMonth() + 1);
            var day = String(date.getDate()).length == 1 ?
                '0' + date.getDate() : date.getDate();
            var hour = String(date.getHours()).length == 1 ?
                '0' + date.getHours() : date.getHours();
            var min = String(date.getMinutes()).length == 1 ?
                '0' + date.getMinutes() : date.getMinutes();

            if (hasLaterDate)
                day++;
            var time = year + '-' + month + '-' + day + 'T' + hour + ':' + min;
            return time;
        }

        var OnGoingTimeChanges = 0;
        $("#TimeRange").calentim({
            inline: true,
            showCalendars: false,
            hourFormat: 24,
            minuteSteps: 15,
            locale: "el",
            //startEmpty: Date().Now,
            //endEmpty: Date().Now,
            format: "hh:mm",
            ontimechange: (calentim, startDate, endDate) => {

                HandleEmployeeSelect2Span();//Reset employee span errors
                OnGoingTimeChanges++;
                var hasLaterDate = 0;
                if (startDate > endDate)
                    hasLaterDate = 1;
                setTimeout(() => {
                    OnGoingTimeChanges--;

                    if (OnGoingTimeChanges == 0)
                        $.ajax({
                            type: "POST",
                            url: '/api/workhours/hasoverlap',
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            data: JSON.stringify(
                                BuildHasOverlapWorkHourDto(startDate, endDate))
                        }).done((data) => {
                            AppendDateRangeToDateInputs(startDate, endDate, hasLaterDate);
                            HandleTimeRangeSpan(data);
                            ValidateEmployeesWithRangeToRealWorkhour();
                        });

                }, 800);
                HandleTimeRangeSpan();
            }
        });
    </script>

    <!-- Show - Hide employees div-->
    <script>
        $('#TimeShiftId').on('change', (e) => {
            if (e.target.value != "") {
                document.getElementById('EmployeesDiv').style = 'display:;';
                document.getElementById('TimeRangeDiv').style = 'display:;';
            }
            else {
                document.getElementById('EmployeesDiv').style = 'display:none;';
                document.getElementById('TimeRangeDiv').style = 'display:none;';
            }
        });
    </script>

    <!--Append employee Select2-->
    <script>
        var Count = 0;
        function AppendEmployeeForm() {
            document.getElementById('EmployeeInput').insertAdjacentHTML('beforeend',
                '<div class="row" id = "EmployeeRowNum_' + Count + '">' +
                '<div class="col-md-1"></div>' +
                '<div class="col-md-5">' +
                '<select class="EmployeesSelect2 EmployeesSelect2Num_' + Count + '" id="Employees[' + Count + '].Id" name="Employees[' + Count + '].Id" style="width:100%"></select>' +
                '<span style="display:none;"id="EmployeesSelect2SpanNum_' + Count + '" class="text-danger EmployeeSelect2Span"></span>' +
                '</div>' +
                '<div class="col-md-1">' +
                '<button type = "button"  class="btn btn-danger btn-circle DeleteEmployeeSelect2" id="' + Count + '"> <i class="fa fa-user" id="' + Count + '"></i></button >' +
                '</div >' +
                '</div>'
            );
            EmployeeSelect2(Count);
            Count++;
        }
    </script>

    <!-- Delete employee Select2-->
    <script>
        $('#EmployeeInput').on('click', '.DeleteEmployeeSelect2', (e) => {

            document.getElementById('EmployeeRowNum_' + e.target.id).remove();
            HandleSubmitButton();
        });
    </script>




}
