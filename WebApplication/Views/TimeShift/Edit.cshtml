@model DataAccess.Models.Entity.TimeShift

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row">
    <div class="col-md-3"> </div>
    <div class="col-md-6">
        <div class="box box-danger" style="margin-top:5%;">

            <div class="box-header">
                <h3 class="box-title">@ViewData["Title"]</h3>
                <div class="pull-right">
                    <button asp-action="Index" class="btn btn-primary">Πίσω στην λίστα</button>
                </div>
            </div>

            <hr />

            <form asp-controller="TimeShift" asp-action="Edit" method="post">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                <div class="box-body">

                    <div class="form-group">
                        <label asp-for="Title" class="control-label"></label>

                        <div class="input-group">
                            <input asp-for="Title" class="form-control" />
                            <span asp-validation-for="Title" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="form-group">
                        <label asp-for="Year" class="control-label"></label>

                        <div class="input-group">
                            <input asp-for="Year" class="form-control" />
                            <span asp-validation-for="Year" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="form-group">
                        <label asp-for="Month" class="control-label"></label>
                        <div class="input-group">
                            <input asp-for="Month" class="form-control" />
                            <span asp-validation-for="Month" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="form-group">
                        <label asp-for="WorkPlaceId" class="control-label"></label>
                        <div class="input-group" style="width:100%">
                            <select class="WorkPlace_Select2" asp-for="WorkPlaceId" style="width:70%">
                                <option value="@Model.WorkPlaceId" selected="selected">@Model.WorkPlace.Title</option>
                            </select>
                            <span asp-validation-for="WorkPlaceId" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="form-group pull-right">
                        <input type="submit" value="Αποθήκευση" class="btn btn-primary " />
                    </div>

                </div>
            </form>
        </div>
    </div>
    <div class="col-md-3"> </div>
</div>


<div class="row">
    <div class="col-md-12">

        <div class="box box-danger" style="margin-top:5%;">

            <div class="box-header">
                <h3 class="box-title"></h3>
            </div>
            <hr />
            <div class="box-body table-responsive">

                <table id="EmployeesWorkhoursDatatable" class="table table-bordered table-hover table-responsive">
                    <thead>
                        <tr>
                            <th>Επιλογή</th>
                            <th>Όνομα</th>
                            <th>Επίθετο</th>
                            @for (int i = 1; i <= Model.DaysInMonth; i++)
                            {
                                <th style="white-space: nowrap;" id="thDayNum_@i" class="TableDays"></th>
                            }
                        </tr>
                    </thead>
                    <tfoot>
                        <tr>
                            <th data-searchable="false">Επιλογή</th>
                            <th data-searchable="false">Όνομα</th>
                            <th data-searchable="false">Επίθετο</th>
                            @for (int i = 1; i <= Model.DaysInMonth; i++)
                            {
                                <th style="white-space: nowrap;" id="tbDayNum_@i"class="TableDays"  data-searchable="false"></th>
                            }
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    </div>
</div>



<div class="modal fade in" data-backdrop="static" id="AddWorkHour_Modal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
                <h4 class="modal-title">Default Modal</h4>
            </div>
            <div class="modal-body" id="AddWorkHour_ModalBody">
                <div class="row" style="padding-top:10px; padding-bottom:15px;">
                    <div class="col-md-2"></div>
                    <div class="col-md-6">
                        <label>Προσθήκη επιπλέων βάρδιας</label>
                    </div>
                    <div class="col-md-4">
                        <button class="btn btn-success" id="AppendWorkHour"><i class="fa fa-plus-square"></i></button>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default pull-left" data-dismiss="modal">Κλείσιμο</button>
                <button type="button" class="btn btn-primary" id="SaveWorkHours">Αποθήκευση αλλαγών</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade in" data-backdrop="static" id="EditWorkHour_Modal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
                <h4 class="modal-title">Επεξεργασία ωρών χρήστη</h4>
            </div>
            <div class="modal-body" id="EditWorkHour_ModalBody"></div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default pull-left" data-dismiss="modal">Κλείσιμο</button>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
<script>
    var WorkHourId = 0;
    var CelentimDate = "";

    $(document).ready(function () {
        Datatable();
    });
</script >

    <!--///////////////////////////////////////-->
    <!--///          Date Functrions        ///-->
    <!--///////////////////////////////////////-->

<script >

    const FindHourDifference = (startDate, endDate) => {
        if (new Date(endDate).valueOf() > new Date(startDate).valueOf())
            return (new Date(endDate).valueOf() - new Date(startDate).valueOf()) / 1000 / 60 / 60;
        else
            return (new Date(startDate).valueOf() - new Date(endDate).valueOf()) / 1000 / 60 / 60;
    }

    const FindHourDifferencePerDay = (startDate, endDate) => {
        startDate = new Date(ConvertDateFormatToMDYHm(startDate));
        endDate = new Date(ConvertDateFormatToMDYHm(endDate));

        startDate.setFullYear(endDate.getFullYear());
        startDate.setMonth(endDate.getMonth());
        startDate.setDate(endDate.getDate());

        if (endDate.valueOf() < startDate.valueOf())
            endDate.setDate(endDate.getDate()+1);
        return (endDate.valueOf() - startDate.valueOf()) / 1000 / 60 / 60;
    }

    const FindDaysDifference = (startDate, endDate) => {
        startDate = new Date(ConvertDateFormatToMDYHm(startDate));
        endDate = new Date(ConvertDateFormatToMDYHm(endDate));

        startDate.setHours(endDate.getHours());
        startDate.setMinutes(endDate.getMinutes());
        startDate.setSeconds(endDate.getSeconds());
        startDate.setMilliseconds(endDate.getMilliseconds());
        return ((endDate.valueOf() - startDate.valueOf()) / (1000 * 60 * 60 * 24)) + 1;
    }

    const ConvertToDateStartOnEndOn = (startDate, endDate) => {
        var start = moment(startDate, 'DD/MM/YYYY HH:mm').format('DD/MM/YYYY');
        var end = moment(endDate, 'DD/MM/YYYY HH:mm').format('DD/MM/YYYY');
        if (start == end)
            return start;
        else
            return start + ' - ' + end;

    }
    const CreateDateFromApi = date => moment(date, 'YYYY/MM/DD HH:mm:ss')

    const ConvertToTimeStartOnEndOn = (startDate, endDate) =>
        moment(startDate, 'DD/MM/YYYY HH:mm').format('HH:mm') +
        ' - ' +
        moment(endDate, 'DD/MM/YYYY HH:mm').format('HH:mm');

    const ConvertDateFormatToMDY = (date) => moment(date, 'DD/MM/YYYY')
        .format("MM/DD/YYYY");

   
    
    const ConvertDateFormatToMDYHm = (date) => moment(date, 'DD/MM/YYYY HH:mm')
        .format("MM/DD/YYYY HH:mm");

    const GMTtoUTCconverter = (GMTtime) => Date.UTC(
        GMTtime.getUTCFullYear(),
        GMTtime.getUTCMonth(),
        GMTtime.getUTCDate(),
        GMTtime.getUTCHours(),
        GMTtime.getUTCMinutes(),
        GMTtime.getUTCSeconds());

    const ConvertDateForApi = (GMTtime, hasLaterDate) => {
        var date = new Date(GMTtoUTCconverter(GMTtime));
        var year = date.getFullYear();
        var month = String((date.getMonth() + 1)).length == 1 ?
            '0' + (date.getMonth() + 1) : (date.getMonth() + 1);
        var day = String(date.getDate()).length == 1 ?
            '0' + date.getDate() : date.getDate();
        var hour = String(date.getHours()).length == 1 ?
            '0' + date.getHours() : date.getHours();
        var min = String(date.getMinutes()).length == 1 ?
            '0' + date.getMinutes() : date.getMinutes();

        if (hasLaterDate)
            day++;
        var time = year + '-' + month + '-' + day + 'T' + hour + ':' + min;
        return time;
    }
    const ConvertNewDateToMDYHm= (GMTtime) => {
        var date = new Date(GMTtime);
        var year = date.getFullYear();
        var month = String((date.getMonth() + 1)).length == 1 ?
            '0' + (date.getMonth() + 1) : (date.getMonth() + 1);
        var day = String(date.getDate()).length == 1 ?
            '0' + date.getDate() : date.getDate();
        var hour = String(date.getHours()).length == 1 ?
            '0' + date.getHours() : date.getHours();
        var min = String(date.getMinutes()).length == 1 ?
            '0' + date.getMinutes() : date.getMinutes();

        return day + '/' + month + '/' + year + ' ' + hour + ':' + min;
    }

</script>


    <!--///////////////////////////////////////-->
    <!--///             Validation          ///-->
    <!--///////////////////////////////////////-->

    <script>
        const ValidateNullInputs = (workHourId) => {
            var hasError = false;
            GetWorkHourIdsForNullDateInputs().filter(nullWorkHourid =>
                nullWorkHourid == workHourId).forEach(workHourId => {
                    hasError = true;
                    HandleWorkHourSpan(workHourId,
                        'Πρέπει να εισαχθεί ημερομηνία απο το ημερολόγιο!');
                });
            return hasError;
        };

        const ValidateStartOnLessThanEndOn = (workHourId) => {
            var splitedDate = $("#CalentimInputNum_" + workHourId)[0].value.split('/-/');
            var start = new Date(ConvertDateFormatToMDYHm(splitedDate[0]));
            var end = new Date(ConvertDateFormatToMDYHm(splitedDate[1]));

            if (start.getTime() >= end.getTime())
                HandleWorkHourSpan(workHourId,
                    'Η ημερομηνία έναρξης πρεπει να είναι προγενέστερη απο της λήξης');
        }

        const AreDatesOverlaping = (baseDate, checkDate) => {
            if (baseDate.length > 0 && toString.call(baseDate[0]) === "[object Array]") {
                for (var i = 0; i < baseDate.length; i++)
                    if ((baseDate[i][0] <= checkDate[0] && checkDate[0] <= baseDate[i][1]) ||
                        (baseDate[i][0] <= checkDate[1] && checkDate[1] <= baseDate[i][1]) ||
                        (checkDate[0] < baseDate[i][0] && baseDate[i][1] < checkDate[1]) == true)
                        return true;
            }
            else if (checkDate.length > 0 && toString.call(checkDate[0]) === "[object Array]") {
                for (var i = 0; i < checkDate.length; i++)
                    if ((baseDate[0] <= checkDate[i][0] && checkDate[i][0] <= baseDate[1]) ||
                        (baseDate[0] <= checkDate[i][1] && checkDate[i][1] <= baseDate[1]) ||
                        (checkDate[i][0] < baseDate[0] && baseDate[1] < checkDate[i][1]) == true)
                        return true;
            }
            else
                if ((baseDate[0] <= checkDate[0] && checkDate[0] <= baseDate[1]) ||
                    (baseDate[0] <= checkDate[1] && checkDate[1] <= baseDate[1]) ||
                    (checkDate[0] < baseDate[0] && baseDate[1] < checkDate[1]) == true)
                    return true;

            return false
        }

        const RevalidateExistingErrorsOnWorkHours = () => {
            [...document.getElementsByClassName('WorkHourErrorSpan')]
                .filter(span =>
                    span.innerHTML.includes('Αυτή η βάρδια επειρεάζει μία '+
                        'υπάρχων βάρδια'))
                .map(span => span.id.split('_')[1])
                .forEach(workHourId => ValidateAppendedWorkHoursTimeRange(workHourId));
        };

        const GetSelect2ValidationData = workHourId => {
            var response = [];
            var workHourDateInputs = [...document.getElementsByClassName('calentimInput')];
            workHourDateInputs.forEach(input =>
                SplitDateRangeInDates(input).forEach(result => {
                    if (IsEdit())
                        response.push(
                            BuildValidateEmployeesToEditWorkHourDto(
                                new Date(ConvertDateFormatToMDYHm(result.startDate)),
                                new Date(ConvertDateFormatToMDYHm(result.endDate)),
                                new Date(ConvertDateFormatToMDYHm(GetDbDateInputStartValue(result.workHourId))),
                                new Date(ConvertDateFormatToMDYHm(GetDbDateInputEndValue(result.workHourId))),
                                result.workHourId))
                    else
                        response.push(
                            BuildValidateEmployeesToAddWorkHourDto(
                                new Date(ConvertDateFormatToMDYHm(result.startDate)),
                                new Date(ConvertDateFormatToMDYHm(result.endDate)),
                                result.workHourId))
                }));
            return response;
            };

        const ValidateEmployeesWithRangeToWorkhour = (workHourId) =>
            $.ajax({
                type: "POST",
                url: '/api/workhours/HasOverlapRange',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: JSON.stringify(GetSelect2ValidationData(workHourId))
            }).done((responses) => {
                HandleEmployeeSelect2SpanPerWorkHour(undefined, undefined, workHourId)
                responses.forEach((response) => {
                    HandleEmployeeSelect2SpanPerWorkHour(
                        'EmployeeSpanWorkHourNum_' + workHourId + '_EmployeeNum_' +
                        GetSelect2NumBySelectedEmployeeIdAndWorkHourId(response.employeeId, workHourId),
                        response);
                });
                HandleSubmitButton();
            });

        const ValidateAppendedWorkHoursTimeRange = (workHourId) => {
            if (IsEdit()) {
                    var inputsFidfgdfgltered = GetAllDateInputValuesFiltered(workHourId);
                    var inputsFiltered = GetAllDateInputValuesFiltered(workHourId)
                        .filter(response =>
                            AreDatesOverlaping(response.startEndDate,
                                GetDateInputValuesPerDay(workHourId)))

                    if (inputsFiltered.length == 0)
                        HandleWorkHourSpan(workHourId);

                    inputsFiltered.forEach(response => {
                        //Set error to both workHours
                        HandleWorkHourSpan(response.workHourId,
                            'Αυτή η βάρδια επειρεάζει μία υπάρχων βάρδια');
                        HandleWorkHourSpan(workHourId,
                            'Αυτή η βάρδια επειρεάζει μία υπάρχων βάρδια');
                    });
            }
            else {
                var workHourIdFiltered = GetWorkHourIdsForNullDateInputs()
                    .filter(nullWorkHourId => nullWorkHourId == WorkHourId);

                //if date is not null
                if (workHourIdFiltered.length == 0) {
                    var inputsFiltered = GetAllDateInputValuesFiltered(workHourId)
                        .filter(response =>
                            AreDatesOverlaping(response.startEndDate,
                                GetDateInputValuesPerDay(workHourId)))
                    if (inputsFiltered.length <=1)
                        HandleWorkHourSpan(workHourId);
                   
                    inputsFiltered.forEach(response => {
                        //Set error to both workHours
                        HandleWorkHourSpan(response.workHourId,
                            'Αυτή η βάρδια επειρεάζει μία υπάρχων βάρδια');
                        HandleWorkHourSpan(workHourId,
                            'Αυτή η βάρδια επειρεάζει μία υπάρχων βάρδια');
                    });
                }
            }
        };
    </script>



    <!--///////////////////////////////////////-->
    <!--///             DTOs                ///-->
    <!--///////////////////////////////////////-->

    <script>
          const BuildHasOverlapWorkHourDto = (start,end) => ({
            timeShiftId: @Model.Id,
              startOn: ConvertDateForApi(new Date(ConvertDateFormatToMDYHm(start)), false),
              endOn: ConvertDateForApi(new Date(ConvertDateFormatToMDYHm(end)), false)
        });

        const BuildSelect2DtoNum = (params, workHourId) => ({
                timeShiftId: @Model.Id,
                search: params.term,
                page: params.page || 1,
            existingEmployees: GetWorkHourEmployeeIds(workHourId)
        });

        const BuildSelect2Dto = (params) => ({
                timeShiftId: @Model.Id,
                search: params.term,
                page: params.page || 1
        });

        const BuildValidateAreDatesOverlapingDto = (startDate, endDate, workHourId) => ({
            startEndDate: [new Date(startDate), new Date(endDate)],
            workHourId: workHourId
        })

        const BuildValidateEmployeesToAddWorkHourDto = (startDate, endDate, workHourId) => ({
            timeShiftId:@Model.Id,
            startOn: ConvertDateForApi(startDate),
            endOn: ConvertDateForApi(endDate),
            isEdit:false,
            employeeIds: GetAlreadyAppendedEmployeeIdsPerWorkHour(workHourId)
        });

        const BuildValidateEmployeesToEditWorkHourDto = (startDate, endDate, excludeStartOn, excludeEndOn, workHourId) => ({
            timeShiftId:@Model.Id,
            startOn: ConvertDateForApi(startDate),
            endOn: ConvertDateForApi(endDate),
            excludeStartOn: ConvertDateForApi(excludeStartOn),
            excludeEndOn: ConvertDateForApi(excludeEndOn),
            isEdit: true,
            employeeIds: GetAlreadyAppendedEmployeeIdsPerWorkHour(workHourId)
        });

        var BuildSaveWorkHourToDbDto = (startDate, endDate, employeeId, workHourId) =>
         ({
                startOn: ConvertDateForApi(startDate),
                endOn: ConvertDateForApi(endDate),
                timeShiftId:@Model.Id,
                employeeId: employeeId,
                isDayOff: GetIsDayOffValue(workHourId),
                comments: GetCommentValue(workHourId)
         });

        var BuildEditWorkHourToDbDto = (startDate, endDate, newStartDate,
            newEndDate, employeeId, workHourId) =>
         ({
                startOn: ConvertDateForApi(startDate),
                endOn: ConvertDateForApi(endDate),
                newStartOn: ConvertDateForApi( newStartDate),
                newEndOn: ConvertDateForApi(newEndDate),
                timeShiftId:@Model.Id,
                employeeId: employeeId,
                isDayOff: GetIsDayOffValue(workHourId),
                comments: GetCommentValue(workHourId)
         });

        var BuildDeleteWorkHourToDbDto = (startDate, endDate, employeeId) =>
         ({
                startOn: ConvertDateForApi(startDate),
                endOn: ConvertDateForApi(endDate),
                timeShiftId:@Model.Id,
                employeeId: employeeId
         });

        const BuildCellWorkHourDto = (day,employeeIds) => ({
            timeShiftId:@Model.Id,
            cellDay: day,
            employeeIds: employeeIds
        });

        const BuildDeleteBatchWorkHourDto = ( workHourId) => ({
            timeShiftId:@Model.Id,
            startOn: ConvertDateForApi(
                new Date(ConvertDateFormatToMDYHm(GetDateInputValues(workHourId)[0])),
                false),
            endOn: ConvertDateForApi(
                new Date(ConvertDateFormatToMDYHm(GetDateInputValues(workHourId)[1])),
                false),
            employeeIds: GetWorkHourEmployeeIds(workHourId)
        });

        const BuildSaveEditedWorkHourDto = (dateInput, employeeId) =>
         ({

                startOn: ConvertDateFormatToMDYHm(dateInput.value.split('/-/')[0]),
                endOn: ConvertDateFormatToMDYHm(dateInput.value.split('/-/')[1]),
                newStartOn: ConvertDateFormatToMDYHm(dateInput.value.split('/-/')[0]),
                newEndOn: ConvertDateFormatToMDYHm(dateInput.value.split('/-/')[1]),
                timeShiftId:@Model.Id,
                employeeIds: GetWorkHourEmployeeIds(workHourId)
         });

    </script>


    <!--///////////////////////////////////////-->
    <!--///             Functions           ///-->
    <!--///////////////////////////////////////-->

    <script>
        const GetWorkHourEmployeeIdsToDelete = workHourId => 
            GetWorkHourSelect2Ids(workHourId).filter(select2Id =>
                document.getElementById('EmployeeRowNum_' + select2Id)
                    .style.opacity == '0.5')
                .map(select2Id => document.getElementById('EmployeesSelect2Num_' + workHourId + '_EmployeeNum_' + select2Id))
                .map(select2 => select2.value);

        const GetWorkHourEmployeeIds = workHourId =>
            [...document.getElementsByClassName('EmployeeSelect2WorkHourNum_' + workHourId)]
                .map(select2 => select2.value).filter(val => val != "");

        const GetWorkHourSelect2Ids = workHourId =>
            [...document.getElementsByClassName('EmployeeSelect2WorkHourNum_' + workHourId)]
                .map(select2 => select2.id).map(id => id.split('_')[3]);

        const GetAllWorkHourIds = () =>
            [...document.getElementsByClassName('WorkHourDiv')]
                .map(div => div.id.split('_')[1]);

        const GetDateInputValuesPerDay= (workHourId) => {
            var response = [];
            var date = document.getElementById('CalentimInputNum_' + workHourId).value;
            var startDate = new Date(ConvertDateFormatToMDYHm(date.split('/-/')[0]));
            var endDate = new Date(ConvertDateFormatToMDYHm(date.split('/-/')[1]));

            //Count is kept before date instances get changed bellow
            var CurrentDateDaysDiff = FindDaysDifference(new Date(startDate), new Date(endDate));

            for (var i = 0; i < CurrentDateDaysDiff; i++) {

                endDate.setDate(startDate.getDate());
                endDate.setMonth(startDate.getMonth());
                endDate.setFullYear(startDate.getFullYear());

                if (startDate.valueOf() > endDate.valueOf())
                    endDate.setDate(startDate.getDate() + 1);

                response.push([new Date(startDate), new Date(endDate)]);
                //Add next Day
                startDate.setDate(startDate.getDate() + 1);
            }
            return response;
        };

        const SetDayOffSliderState = (workHourId, state) => {
            var slider = document.getElementById('DayOffSliderNum_' + workHourId)
            if (slider.disabled==true) {
                slider.disabled = false;

                $('#DayOffSliderNum_' + workHourId)
                    .bootstrapToggle(state == 'true' || state ==true ? 'on' :'off');

                slider.disabled = true;
            }
            else 
                $('#DayOffSliderNum_' + workHourId)
                    .bootstrapToggle( state== true ? 'on' :'off');
        }

        const UndoValues = workHourId => {
            SetCommentValue(workHourId,GetCommentDatabaseValue(workHourId));
            SetIsDayOffValue(workHourId, GetIsDayOffDatabaseValue(workHourId));
            SetDayOffSliderState(workHourId, GetIsDayOffDatabaseValue(workHourId))

        };

        const GetDateInputValues = workHourId => 
             document.getElementById('CalentimInputNum_' + workHourId).value
                .split('/-/').map(date => new Date(ConvertDateFormatToMDYHm(date)));

        const GetDbDateInputStartValue = (workHourId) =>
            ConvertNewDateToMDYHm(new Date(document.getElementById(
                'DatabaseDateStartNum_' + workHourId).value));

        const GetDbDateInputEndValue = (workHourId) =>
            ConvertNewDateToMDYHm(new Date(document.getElementById(
                'DatabaseDateEndNum_' + workHourId).value));

        const SplitDateRangeInDates = dateInput => {
            var response = [];
            var startDate = new Date(ConvertDateFormatToMDYHm(dateInput.value.split('/-/')[0]));
            var endDate = new Date(ConvertDateFormatToMDYHm(dateInput.value.split('/-/')[1]));

            //Has to keep the count before date instances get changed bellow
            var CurrentDateDaysDiff = FindDaysDifference(new Date(startDate), new Date(endDate));

            for (var i = 0; i < CurrentDateDaysDiff; i++) {

                endDate.setDate(startDate.getDate());
                endDate.setMonth(startDate.getMonth());
                endDate.setFullYear(startDate.getFullYear());
                if (startDate.valueOf() > endDate.valueOf())
                    endDate.setDate(startDate.getDate() + 1);

                response.push({
                    startDate: new Date(startDate),
                    endDate: new Date(endDate),
                    workHourId: dateInput.id.split('_')[1]
                });

                startDate.setDate(startDate.getDate() + 1);
            }
            return response;
        }

        const GetAllDateInputValuesFiltered = (workHourId) => {
            var response = [];

            if (IsEdit()) {
                GetAllWorkHourIds().filter(id=>id != workHourId).forEach(id => {
                    if (!IsWorkHourEditButtonHidden(id)) 
                        SplitDateRangeInDates(CreateFakeInputWithDbDateRange(id))
                            .forEach(result =>
                                response.push(
                                    BuildValidateAreDatesOverlapingDto(
                                        result.startDate,
                                        result.endDate,
                                        result.workHourId)));
                    
                    else
                        SplitDateRangeInDates(
                            document.getElementById('CalentimInputNum_' + id))
                            .forEach(result =>
                                response.push(
                                    BuildValidateAreDatesOverlapingDto(
                                        result.startDate,
                                        result.endDate,
                                        result.workHourId)));
                })
            }
            else {
                //Filter inputs
                var workHourDateInputs = [...document.getElementsByClassName('calentimInput')]
                    .filter(input => input.id != 'CalentimInputNum_' + workHourId);

                //Filter a bit more..
                GetWorkHourIdsForNullDateInputs().forEach(excludeId =>
                    workHourDateInputs = workHourDateInputs.filter(input =>
                        input.id != 'CalentimInputNum_' + excludeId));

                workHourDateInputs.forEach(input =>
                    SplitDateRangeInDates(input).forEach(result => 
                        response.push(
                            BuildValidateAreDatesOverlapingDto(
                                result.startDate,
                                result.endDate,
                                result.workHourId))));
            }
            
            return response;
        }

        const GetWorkHourIdsForNullDateInputs = () => {
            var response = [];
                [...document.getElementsByClassName('DateSpan')].forEach(input => {
                    input.innerHTML == '' ? response.push(input.id.split('_')[1]) : "";});
            return response;
        }

        const GetSelect2NumBySelectedEmployeeIdAndWorkHourId = (employeeId, workHourId) => document
            .querySelectorAll('select.EmployeeSelect2WorkHourNum_' + workHourId + ' > option[value="' + employeeId + '"]')[0]
            .parentElement.id
            .split('_')[3]

        const GetAlreadyAppendedEmployeeIdsPerWorkHour = (num) =>
            [...document.getElementsByClassName('EmployeeSelect2WorkHourNum_' + num + '')]
                .map((data) => data.value)
                .filter((val) => val != "");

        const GetSliderCheckedEmployeeIds = () => {
            var prependEmployeeIds = [];
            [...document.getElementsByClassName('ToggleSliders')]
                .forEach((slider) => {
                    if (slider.checked)
                        prependEmployeeIds.push(slider.getAttribute('employeeid'));
                });
            return prependEmployeeIds;
        }

        const SetValuesToEditWorkHour = (workHour,workHourId) => {
            document.getElementById('DateStartOnEndOnNum_' + workHourId).innerHTML =
                ConvertToDateStartOnEndOn(CreateDateFromApi(workHour.startOn),
                    CreateDateFromApi(workHour.endOn));

            document.getElementById('TimeStartOnEndOnNum_' + workHourId).innerHTML =
                ConvertToTimeStartOnEndOn(CreateDateFromApi(workHour.startOn),
                    CreateDateFromApi(workHour.endOn));

            document.getElementById('DatabaseDateStartNum_' + workHourId).value =
                CreateDateFromApi(workHour.startOn);

            document.getElementById('DatabaseDateEndNum_' + workHourId).value =
                CreateDateFromApi(workHour.endOn);

            document.getElementById('DatabaseCommentsNum_' + workHourId).value =
                workHour.comments;

            document.getElementById('DatabaseDayOffSliderNum_' + workHourId).value =
                workHour.isDayOff;

            SetDayOffSliderState(workHourId, workHour.isDayOff);
            SetCommentValue(workHourId, workHour.comments);
        }

        const SetCalentimInputDateRange = workHourId => {
            var start = new Date(document.getElementById('DatabaseDateStartNum_' + workHourId).value);
            var end = new Date(document.getElementById('DatabaseDateEndNum_' + workHourId).value);
            document.getElementById('CalentimInputNum_' + workHourId).value = 
                ConvertNewDateToMDYHm(start)+
                '/-/' +
                ConvertNewDateToMDYHm(end);
        }

        const CreateFakeInputWithDbDateRange = workHourId => {
            var start = new Date(document.getElementById('DatabaseDateStartNum_' + workHourId).value);
            var end = new Date(document.getElementById('DatabaseDateEndNum_' + workHourId).value);
            var input = document.createElement("INPUT");
            input.setAttribute("value",
                ConvertNewDateToMDYHm(start)+
                '/-/' +
                ConvertNewDateToMDYHm(end));
            input.setAttribute("id", 'CalentimInputNum_' + workHourId);

            return input;
        }

        const CreateFakeInputWithEditedDateRange = workHourId => {
            var editedDate = document.getElementById('CalentimInputNum_' + workHourId).value;
            var start = new Date(ConvertDateFormatToMDYHm(editedDate.split('/-/')[0]));
            var end = new Date(ConvertDateFormatToMDYHm(editedDate.split('/-/')[1]));
            var input = document.createElement("INPUT");
            input.setAttribute("value",
                ConvertNewDateToMDYHm(start) +
                '/-/' +
                ConvertNewDateToMDYHm(end));
            input.setAttribute("id",'CalentimInputNum_' + workHourId);
            return input;
        }

        const GetIsDayOffValue = workHourId =>
            document.getElementById('DayOffSliderNum_' + workHourId).checked == true;

        const GetIsDayOffDatabaseValue = workHourId =>
            document.getElementById('DatabaseDayOffSliderNum_' + workHourId).value;

        const SetIsDayOffValue = (workHourId ,value)=>
            document.getElementById('DayOffSliderNum_' + workHourId).value = value;

        const SetIsDayOffDatabaseValue = (workHourId, value) =>
            document.getElementById('DatabaseDayOffSliderNum_' + workHourId).value = value;

        const GetCommentValue = workHourId => 
            document.getElementById('CommentsNum_' + workHourId).value;

        const SetCommentValue = (workHourId, value)=>
            document.getElementById('CommentsNum_' + workHourId).value = value;

        const GetCommentDatabaseValue = workHourId =>
            document.getElementById('DatabaseCommentsNum_' + workHourId).value;

        const SetCommentDatabaseValue = (workHourId, value) =>
            document.getElementById('DatabaseCommentsNum_' + workHourId).value = value;

        const IsEdit = () => (
            [...document.getElementsByClassName('IsEdit')].length > 0 ? true
                : false);

        const IsWorkHourEditButtonHidden = (workHourId) => {
            var workHourEditButton = document.getElementById(
                'WorkHourEditButtonNum_' + workHourId);
            if (workHourEditButton != undefined) 
                return workHourEditButton.style.display == 'none' ? true : false;
            return false;
        }
        
    </script>


    <!--///////////////////////////////////////-->
    <!--///             Handlers            ///-->
    <!--///////////////////////////////////////-->
    <script>

        //Refresh range date workhour  in any modal
        const HandleShowWorkHourRangeToModal = (workHourId, hasNewDate) => {
            var splitedDate = document.getElementById('CalentimInputNum_' + workHourId)
                .value.split('/-/');

            document.getElementById('TotalHoursPerDayNum_' + workHourId)
                .innerText =
                FindHourDifferencePerDay(splitedDate[0], splitedDate[1]);

            document.getElementById('TotalDaysNum_' + workHourId)
                .innerText =
                FindDaysDifference(splitedDate[0], splitedDate[1]);

            document.getElementById('TotalHoursNum_' + workHourId).innerText =
                FindDaysDifference(splitedDate[0], splitedDate[1]) *
                FindHourDifferencePerDay(splitedDate[0], splitedDate[1]);

            if (IsEdit() && hasNewDate !== false) {
                document.getElementById('NewDateStartOnEndOnNum_' + workHourId)
                    .innerHTML = ConvertToDateStartOnEndOn(splitedDate[0], splitedDate[1]);

                document.getElementById('NewTimeStartOnEndOnNum_' + workHourId)
                    .innerHTML = ConvertToTimeStartOnEndOn(splitedDate[0], splitedDate[1]);

                document.getElementById('NewDateStartOnEndOnNum_' + workHourId)
                    .parentElement.style.display = '';

                document.getElementById('NewTimeStartOnEndOnNum_' + workHourId)
                    .parentElement.style.display = '';

                document.getElementById('LeftDateOnNum_' + workHourId).style
                    .display = '';

                document.getElementById('LeftTimeOnNum_' + workHourId).style
                    .display = '';
            }
            else {
                document.getElementById('DateStartOnEndOnNum_' + workHourId)
                    .innerText =
                    ConvertToDateStartOnEndOn(
                        splitedDate[0], splitedDate[1]);

                document.getElementById('TimeStartOnEndOnNum_' + workHourId)
                    .innerText =
                    ConvertToTimeStartOnEndOn(splitedDate[0], splitedDate[1]);
            }
        };

        //Submit button handler
        const HandleSubmitButton = () => {
            if (IsEdit()) {
                GetAllWorkHourIds().filter(id => IsWorkHourEditButtonHidden(id))
                    .forEach(id => {
                        var workHourSpan = document.getElementById(
                            'WorkHourErrorSpanNum_' + id).style.display !== "none";

                        var select2IdsToDelete = GetWorkHourSelect2Ids(id)
                            .filter(select2Id =>
                                document.getElementById('EmployeeRowNum_' + select2Id)
                                .style.opacity == '0.5')

                        var select2Span = [...document.getElementsByClassName(
                                'EmployeeSelect2SpanWorkHourNum_' + id)]
                            .filter(span => span.style.display !== "none")
                            .filter(span => !(select2IdsToDelete.includes(span.id.split('_')[3])));

                        if (workHourSpan  == true|| select2Span.length > 0) 
                            document.getElementById('WorkHourSaveButtonNum_' + id).disabled = true;
                        else 
                            document.getElementById('WorkHourSaveButtonNum_' + id).disabled = false;
                    });
            }
            else {
                var select2Span = [...document.getElementsByClassName('EmployeeSelect2Span')].filter(span =>
                    span.style.display !== "none");

                var workHourSpan = [...document.getElementsByClassName('WorkHourErrorSpan')].filter(span =>
                    span.style.display !== "none");

                if (workHourSpan.length > 0 || select2Span.length > 0)
                    document.getElementById('SaveWorkHours').disabled = true;
                else
                    document.getElementById('SaveWorkHours').disabled = false;
            }   
        }

        //WorkHour Span handler
        const HandleWorkHourSpan = (workHourId, errorMessage) => {
            if (errorMessage != undefined && workHourId != undefined) {
                var span = document
                    .getElementById('WorkHourErrorSpanNum_' + workHourId);
                span.style = "display:;";
                if (!span.innerHTML.includes(errorMessage))
                    span.innerHTML += errorMessage + '</br>';
            }
            else if (workHourId != undefined)
                [...document.getElementsByClassName('WorkHourErrorSpan')]
                    .filter(span => span.id == 'WorkHourErrorSpanNum_' + workHourId)
                    .forEach((span) => {
                        span.innerHTML = '';
                        span.style = "display:none;"
                    });
        }

        //Employee Span handler
        const HandleEmployeeSelect2SpanPerWorkHour = (elementId, response, workHourId) => {
            //Clear select2 errors
            if (workHourId != undefined && elementId == undefined && response == undefined)
                [...document.getElementsByClassName('EmployeeSelect2SpanWorkHourNum_' + workHourId)]
                    .forEach(span => {
                        span.innerHTML = '';
                        span.style = "display:none;"
                    });
            else if (elementId != undefined) {
                var span = document.getElementById(elementId)
                if (!response.isSuccessful) {
                    span.style = "display:;";
                    if (!span.innerHTML.includes(response.value))
                        span.innerHTML = response.value + '</br>';
                }
            }
        }

        //Edit modal togle show hide buttons
        const HandleWorkHourEditButton = (workHourId) => {
            //if edit button is hidden
            if (document.getElementById('WorkHourEditButtonNum_' + workHourId)
                .style.display !== 'none') {

                document.getElementById('WorkHourEditButtonNum_' + workHourId).style.display = 'none';
                document.getElementById('CalentimButtonNum_' + workHourId).style.display = '';
                document.getElementById('WorkHourSaveButtonNum_' + workHourId).style.display = '';
                document.getElementById('WorkHourDeleteButtonNum_' + workHourId).style.display = '';
                document.getElementById('WorkHourUndoButtonNum_' + workHourId).style.display = '';
                document.getElementById('AppendEmployeeToWorkHourButtonNum_' + workHourId).style.display = '';
                [...document.getElementsByClassName('EmployeeSelect2DeleteButtonNum_' + workHourId)].forEach(empDelButton => empDelButton.style.display = '');
                [...document.getElementsByClassName('EmployeeSelect2WorkHourNum_' + workHourId)].forEach(select2 => select2.disabled = false);
                GetWorkHourSelect2Ids(workHourId).forEach(select2Id =>
                    document.getElementById('EmployeeRowNum_' + select2Id).style.opacity = '1');
                document.getElementById('CommentsNum_' + workHourId).disabled = false;
                document.getElementById('DayOffSliderNum_' + workHourId).disabled = false;
            }
            else {
                document.getElementById('WorkHourEditButtonNum_' + workHourId).style.display = '';
                document.getElementById('CalentimButtonNum_' + workHourId).style.display = 'none';
                document.getElementById('WorkHourSaveButtonNum_' + workHourId).style.display = 'none';
                document.getElementById('WorkHourUndoButtonNum_' + workHourId).style.display = 'none';
                document.getElementById('WorkHourDeleteButtonNum_' + workHourId).style.display = 'none';
                document.getElementById('AppendEmployeeToWorkHourButtonNum_' + workHourId).style.display = 'none';
                [...document.getElementsByClassName('EmployeeSelect2DeleteButtonNum_' + workHourId)].forEach(empDelButton => empDelButton.style.display = 'none');
                [...document.getElementsByClassName('EmployeeSelect2WorkHourNum_' + workHourId)].forEach(select2 => select2.disabled = true);
                document.getElementById('CommentsNum_' + workHourId).disabled = true;
                document.getElementById('DayOffSliderNum_' + workHourId).disabled = true;

                document.getElementById('LeftDateOnNum_' + workHourId).style.display = 'none';
                document.getElementById('LeftTimeOnNum_' + workHourId).style.display = 'none';
                document.getElementById('NewDateStartOnEndOnNum_' + workHourId).parentElement.style.display = 'none';
                document.getElementById('NewTimeStartOnEndOnNum_' + workHourId).parentElement.style.display = 'none';
                document.getElementById('NewDateStartOnEndOnNum_' + workHourId).innerHTML = '';
                document.getElementById('NewTimeStartOnEndOnNum_' + workHourId).innerHTML = '';
                HandleWorkHourSpan(workHourId);
            }
        };

    </script>


    <!--    Modal 'Edit'  Functionality   -->
    <script>
        $('#EmployeesWorkhoursDatatable').on('click', '.faIconEdit', (element) => {
            var day = element.target.getAttribute('dayofmonth');
            var month = document.getElementById('Month').value;
            var year = document.getElementById('Year').value;
            var cellEmployeeId = element.target.getAttribute('employeeid');

            //set global variable the date to initialize celentim
            CelentimDate = year + '-' + month + '-' + day;

            var employeeIds = GetSliderCheckedEmployeeIds();
            if (!employeeIds.includes(cellEmployeeId))
                employeeIds.push(cellEmployeeId);
            $.ajax({
                type: "POST",
                url: "/api/workhours/getForEditCell",
                data: JSON.stringify(BuildCellWorkHourDto(day, employeeIds)),
                contentType: "application/json; charset=utf-8",
                dataType: "json"

            }).done(workHours => workHours.forEach(workHour => {
                WorkHourId++;
                var num = WorkHourId;
                AppendNewWorkHourToEditModal(WorkHourId, workHour.WorkHourId);

                //set new Calentim instance
                Calentim(CelentimDate, WorkHourId, workHour.startOn, workHour.endOn);

                //set new BootstrapToggle instance
                DayOffSlider(WorkHourId, workHour);

                SetDayOffSliderState(WorkHourId, workHour.isDayOff)
                HandleShowWorkHourRangeToModal(WorkHourId, false);
                SetValuesToEditWorkHour(workHour, WorkHourId);
                workHour.employeeIds.forEach(employeeId =>
                    $.get("/api/employees/getSelect2Option/" + employeeId,
                        (response) => {
                            AppendPreloadedEmployeeToWorkHourToEditModal(num,
                                ++WorkHourId, employeeId, response.results[0].text);

                            EmployeeSelect2(num, WorkHourId);  //set new Select2 instance
                            Calentim(CelentimDate, WorkHourId);//set new Celentim instance
                    }));
            }));

            $('#EditWorkHour_Modal').modal('show')
        });

        //Delete Workhour in modal
        $('#EditWorkHour_Modal').on('click', '.WorkHourDeleteButton', (element) => {
            var workHourId = element.target.getAttribute('workhourid')

            $.ajax({
                type: "POST",
                url: "/api/workhours/deleteBatch",
                data: JSON.stringify(BuildDeleteBatchWorkHourDto(workHourId)),
                contentType: "application/json; charset=utf-8",
                dataType: "json"

            }).done(() => $('#WorkHourDivNum_' + workHourId).remove());
            RevalidateExistingErrorsOnWorkHours();
            HandleSubmitButton();

        })

        //Append new Select2 Employees search for WorkHour
        $('#EditWorkHour_Modal').on('click', '.AppendEmployeeToWorkHourButton', (e) => {
            var currentWorkHourId = e.target.getAttribute('num');
            WorkHourId++;
            AppendEmployeeToWorkHour(currentWorkHourId, WorkHourId)
            EmployeeSelect2(currentWorkHourId, WorkHourId);        //set new Select2 instance
        });

        //Delete Employee from workhour
        $('#EditWorkHour_Modal').on('click', '.EmployeeSelect2DeleteButton', (e) => {
            var elemId = e.target.getAttribute('num');
            var workHourId = e.target.getAttribute('workhourid');
            var employeeRow = document.getElementById('EmployeeRowNum_' + elemId);

            if (employeeRow.className.includes('Preloaded'))
                if (employeeRow.style.opacity == '0.5') 
                    employeeRow.style.opacity = '1';
                else
                    employeeRow.style.opacity = '0.5';
            else
                employeeRow.remove();

            HandleSubmitButton();

        })

        //Edit WorkHour in modal
        $('#EditWorkHour_Modal').on('click', '.WorkHourEditButton', e => {
            var workHourId = e.target.getAttribute('workhourid');
            HandleWorkHourEditButton(workHourId);
            RevalidateExistingErrorsOnWorkHours();
            HandleSubmitButton();
        })

        //Undo edit WorkHour in modal
        $('#EditWorkHour_Modal').on('click', '.WorkHourUndoButton', e => {
            var workHourId = e.target.getAttribute('workhourid');
            HandleWorkHourEditButton(workHourId);
            UndoValues(workHourId);
            RevalidateExistingErrorsOnWorkHours();
        })

      
        //Save edited Date in modal
        $('#EditWorkHour_Modal').on('click','.WorkHourSaveButton', e => {
            var PostWorkHoursEdit = [];
            var PostWorkHoursDelete = [];
            var workHourId = e.target.getAttribute('workhourid')
            var dateInput = document.getElementById('CalentimInputNum_' + workHourId);
            var workHourId = dateInput.id.split('_')[1];
            var employeeIdsToDelete = GetWorkHourEmployeeIdsToDelete(workHourId);

            SplitDateRangeInDates(CreateFakeInputWithDbDateRange(workHourId))
                .forEach(response => {
                    //Fill array  with workHour delete
                    employeeIdsToDelete.forEach(employeeId =>
                        PostWorkHoursDelete.push(BuildDeleteWorkHourToDbDto(response.startDate,
                            response.endDate, employeeId)));

                    SplitDateRangeInDates(CreateFakeInputWithEditedDateRange(response.workHourId))
                        .forEach(editResponse => {
                            //If user has edited date or added employees
                            GetWorkHourEmployeeIds(workHourId)
                                .filter(employeeId =>
                                    !employeeIdsToDelete.includes(employeeId))
                                .forEach(employeeId =>
                                    PostWorkHoursEdit.push(BuildEditWorkHourToDbDto(
                                        response.startDate,
                                        response.endDate,
                                        editResponse.startDate,
                                        editResponse.endDate,
                                        employeeId,
                                        workHourId)));
                        })
                });

            if (PostWorkHoursDelete.length>0)
                $.ajax({
                    type: "POST",
                    url: "/api/workhours/deleteEmployeeWorkhours",
                    data: JSON.stringify(PostWorkHoursDelete),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json"
                });

            if (PostWorkHoursEdit.length > 0)
                $.ajax({
                    type: "POST",
                    url: "/api/workhours/editEmployeeWorkhours",
                    data: JSON.stringify(PostWorkHoursEdit),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json"
                });

            //Change any values since date maybe edited
            var newStartDate = new Date(ConvertDateFormatToMDYHm(
                dateInput.value.split('/-/')[0]));

            var newEndDate = new Date(ConvertDateFormatToMDYHm(
                dateInput.value.split('/-/')[1]));

            document.getElementById('DatabaseDateStartNum_' + workHourId).value =
                newStartDate;

            document.getElementById('DatabaseDateEndNum_' + workHourId).value =
                newEndDate;


            SetCommentDatabaseValue(workHourId,GetCommentValue(workHourId)); 
            SetIsDayOffDatabaseValue(workHourId, GetIsDayOffValue(workHourId)); 

            SetCalentimInputDateRange(workHourId);
            HandleShowWorkHourRangeToModal(workHourId, false);
            HandleWorkHourEditButton(workHourId);
        });


        //Cleanup on modal close
        $('#EditWorkHour_Modal').on('hidden.bs.modal', (e) => {
            $('.ElementToDeleteOnClose').remove();
            $('#EmployeesWorkhoursDatatable').DataTable().clear().destroy();
            Datatable();
        })
    </script>


    <!--    Modal 'Add'  Functionality   -->
    <script>
        $('#EmployeesWorkhoursDatatable').on('click', '.faIconAdd', (element) => {
            var day = element.target.getAttribute('dayofmonth');
            var month = document.getElementById('Month').value;
            var year = document.getElementById('Year').value;

            //set global variable the date to initialize celentim
            CelentimDate = year + '-' + month + '-' + day;
            $('#SaveWorkHours').attr('employeeid',
                element.target.getAttribute('employeeid'));
            $('#AppendWorkHour').attr('employeeid',
                element.target.getAttribute('employeeid'));

            $('#AddWorkHour_Modal').modal('show');
        });

        //Append new workhour to modal

        $('#AppendWorkHour').on('click', (e) => {
            //Get id from element or father element
            var employeeId = e.target.getAttribute('employeeid');
            if (employeeId == null)
                employeeId = e.target.parentElement.getAttribute('employeeid');

            var prependEmployeeIds = GetSliderCheckedEmployeeIds();
            WorkHourId++;
            AppendNewWorkHourToAddModal(WorkHourId);  //Append html to add modal
            Calentim(CelentimDate, WorkHourId);       //set new Calentim instance
            DayOffSlider(WorkHourId);                 //set new BootstrapToggle instance

            var num = WorkHourId;
            if (prependEmployeeIds.length > 0)
                prependEmployeeIds.forEach(employeeId =>
                    $.get("/api/employees/getSelect2Option/" + employeeId, (data) => {
                        AppendPreloadedEmployeeToWorkHour(num, ++WorkHourId,
                            employeeId, data.results[0].text);   //Append Select2 row html to add modal
                        EmployeeSelect2(num, WorkHourId);        //set new Select2 instance
                    }));
            //}).done(done => ValidateEmployeesWithRangeToWorkhour(WorkHourId)));

            else
                $.get("/api/employees/getSelect2Option/" + employeeId, data => {
                    AppendPreloadedEmployeeToWorkHour(num, ++WorkHourId,
                        employeeId, data.results[0].text);   //Append Select2 row html to add modal
                    EmployeeSelect2(num, WorkHourId);        //set new Select2 instance
                });

            ValidateNullInputs(WorkHourId);
            HandleSubmitButton();
        });

        //Append new Select2 Employees search for WorkHour
        $('#AddWorkHour_Modal').on('click', '.AppendEmployeeToWorkHourButton', (e) => {
            var currentWorkHourId = e.target.getAttribute('num');
            WorkHourId++;
            AppendEmployeeToWorkHour(currentWorkHourId, WorkHourId)
            EmployeeSelect2(currentWorkHourId, WorkHourId);        //set new Select2 instance
        });

        //Delete Workhour from modal
        $('#AddWorkHour_Modal').on('click', '.WorkHourDeleteButton', (e) => {
            var workHourId = e.target.getAttribute('workhourid');
            $('#WorkHourDivNum_' + workHourId).remove();
            RevalidateExistingErrorsOnWorkHours();
            ValidateEmployeesWithRangeToWorkhour(workHourId);
            HandleSubmitButton();
        })

        //Delete Employee from workhour
        $('#AddWorkHour_Modal').on('click', '.EmployeeSelect2DeleteButton', (e) => {
            var elemId = e.target.getAttribute('num');
            var workHourId = e.target.getAttribute('workhourid');
            $('#EmployeeRowNum_' + elemId).remove();
            if (!ValidateNullInputs(workHourId))
                ValidateEmployeesWithRangeToWorkhour(workHourId);

            HandleSubmitButton();
        })

        //Save Button
        $('#SaveWorkHours').on('click', e => {
            var dataToPost = [];
            var dateInputs = [...document.getElementsByClassName('calentimInput')];

            dateInputs.forEach(date => {
                var workHourId = date.id.split('_')[1];
                var startDate = new Date(ConvertDateFormatToMDYHm(
                    date.value.split('/-/')[0]));

                var endDate = new Date(ConvertDateFormatToMDYHm(
                    date.value.split('/-/')[1]));

                var daysCount = FindDaysDifference(startDate, endDate);

                GetWorkHourEmployeeIds(workHourId).forEach(employeeId => {
                    var startSubmitDate = new Date(startDate);
                    var endSubmitDate = new Date(endDate);

                    for (var i = 0; i < daysCount; i++) {
                        endSubmitDate.setFullYear(startSubmitDate.getFullYear());
                        endSubmitDate.setMonth(startSubmitDate.getMonth());
                        endSubmitDate.setDate(startSubmitDate.getDate());

                        if (startSubmitDate.valueOf() > endSubmitDate.valueOf())
                            endSubmitDate.setDate(startSubmitDate.getDate() + 1);

                        dataToPost.push(BuildSaveWorkHourToDbDto(
                            startSubmitDate,
                            endSubmitDate,
                            employeeId,
                            workHourId));
                        //Increase day by 1 for each selected date
                        startSubmitDate.setDate(startSubmitDate.getDate() + 1);
                    }
                });
            })

            $.ajax({
                type: "POST",
                url: "/api/workhours/addEmployeeWorkhours",
                data: JSON.stringify(dataToPost),
                contentType: "application/json; charset=utf-8",
                dataType: "json"
            });
            $('#AddWorkHour_Modal').modal('hide');
        });

        //Cleanup on modal close
        $('#AddWorkHour_Modal').on('hidden.bs.modal', e => {
            $('.ElementToDeleteOnClose').remove();
            $('#EmployeesWorkhoursDatatable').DataTable().clear().destroy();
            Datatable();
            count = 0;
        })
    </script>



    <!--    Datatable Hover    -->
    <script>
        //Make Datatable cell set/unset backround grey and show/hide <i>
        $('#EmployeesWorkhoursDatatable')
            .on('mouseenter', '.DataTableHoverCell', (elem) => 
                elem.target.querySelectorAll('i')
                    .forEach(element => element.classList.remove("hidden")))
            .on('mouseleave', '.DataTableHoverCell', (elem) => 
                elem.target.querySelectorAll('i')
                    .forEach(element => element.classList.add("hidden")));

        //Cursor change - mouse over <i> Edit
        $('#EmployeesWorkhoursDatatable')
            .on('mouseenter', '.faIconEdit', (elem) => 
                elem.target.setAttribute("style", "cursor:pointer"))
            .on('mouseleave', '.faIconEdit', (elem) => 
                elem.target.setAttribute("style", "cursor:"))

      //Cursor change - mouse over <i> Add
        $('#EmployeesWorkhoursDatatable')
            .on('mouseenter', '.faIconAdd', (elem) => 
                elem.target.setAttribute("style", "cursor:pointer"))
            .on('mouseleave', '.faIconAdd', (elem) =>
                elem.target.setAttribute("style", "cursor:"));
    </script>



    <!--///////////////////////////////////////-->
    <!--///             Libraries           ///-->
    <!--///////////////////////////////////////-->
    <!-- Select 2-->
    <script>
        $('.WorkPlace_Select2').select2({
            ajax: {
                url: '/api/workplaces/select2',
                data: function (params) {
                    var query = {
                        search: params.term,
                        page: params.page || 1
                    }
                    return query;
                }
            }
        });

        const DayOffSlider = workHourId => {
            $('#DayOffSliderNum_' + workHourId).bootstrapToggle({
                on: 'Ναί',
                off: 'Όχι'
            });
        }


        //Employees Select2
        const EmployeeSelect2 = (workHourId, num) => {
            $('#EmployeesSelect2Num_' + workHourId + '_EmployeeNum_' + num).select2({
                ajax: {
                    type: "POST",
                    url: '/api/employees/select2',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: function (params) {
                        if (num != null)
                            return JSON.stringify(BuildSelect2DtoNum(params, workHourId));
                        else
                            return JSON.stringify(BuildSelect2Dto(params));
                    }
                }
            }).on('change', (e) => {
                if (!ValidateNullInputs(workHourId)) {
                    ValidateEmployeesWithRangeToWorkhour(workHourId);
                }
                HandleSubmitButton();

            });
        }

        //Calentim
        var Calentim = (currentDate, workHourId,dbStartDate,dbEndDate) => {
            //$("#CallendarButtonNum_" + workHourId).data("calentim").destroy();
            var setStartDate = currentDate;
            var setEndDate = currentDate;
            if(dbStartDate!=undefined)
                setStartDate = dbStartDate;
            if(dbEndDate!=undefined)
                setEndDate = dbEndDate;
            $('#CalentimButtonNum_' + workHourId).calentim({
                dateSeparator: '/-/',
                startDate: new Date(setStartDate),
                endDate: new Date(setEndDate),
                startOnMonday: true,
                dontPrefixHours: false,
                format: "DD/MM/YYYY HH:mm",
                hourFormat: 24,
                calendarCount: 1,
                minuteSteps: 15,
                showHeader: false,
                showButtons: true,
                locale: "el",
                target: $("#CalentimInputNum_" + workHourId),
                showOn: "right",
                rangeOrientation: "vertical",
                ranges: [
                    {
                        title: "Χτές και ημέρα κελιού",
                        startDate: moment(currentDate).subtract(1, 'days'),
                        endDate: moment(currentDate)
                    },
                    {
                        title: "Ημέρα κελιού",
                        startDate: moment(currentDate),
                        endDate: moment(currentDate)
                    },
                    {
                        title: "Ημέρα κελιού και άυριο",
                        startDate: moment(currentDate),
                        endDate: moment(currentDate).add(1, 'days')
                    }
                ],
                disabledRanges: [
                    {
                        start: moment("01/01/1700", "DD/MM/YYYY"),//Earliest date in docs
                        end: moment(currentDate).set('date', 0)
                    },
                    {
                        start: moment(currentDate).add(1, 'month').set('date', 1),
                        end: moment("31/12/4000", "DD/MM/YYYY")//Latest date in docs
                    }],
                onbeforehide: (calentim) => {

                    HandleWorkHourSpan(workHourId);
                    //ValidateTotalWorkTotal(workHourId);
                    HandleShowWorkHourRangeToModal(workHourId)


                        if (!ValidateNullInputs(workHourId)) {
                            ValidateAppendedWorkHoursTimeRange(workHourId);
                            RevalidateExistingErrorsOnWorkHours();
                            ValidateEmployeesWithRangeToWorkhour(workHourId);
                        }
                },
                onaftershow: () =>
                    //Fix Calentim width
                    [...document.getElementsByClassName('calentim-input')]
                        .forEach((calentim) =>
                            calentim.setAttribute('style', 'width: 600px;'))
            })
        };

        //Datatable
        var Datatable = () => $('#EmployeesWorkhoursDatatable').DataTable({
            serverSide: true,
            responsive: true,
            colReorder: true,
            processing: true,
            language: {
                processing: '<i class="fa fa-spinner fa-spin fa-3x fa-fw"></i><span class="sr-only"></span> '
            },
            dom: 'frtlp',
            ajax: {
                url: '/api/employees/getdatatable',
                type: 'POST',
                contentType: "application/json",
                data: (data, type, row, meta) => {

                    data.predicate = 'TimeShiftEdit';
                    data.genericId =@Model.Id;
                    data.timeShiftYear =@Model.Year;
                    data.timeShiftMonth =@Model.Month;

                    return JSON.stringify(data);
                }
            },
            order: [[0, 'desc']],
            columns: CreateDatatableColumns(),
            rowCallback: function (row, data, displayNum, displayIndex, dataIndex) {
                for (var i = 1; i <= @Model.DaysInMonth ; i++) {
                    row.querySelectorAll('td')[i + 2].setAttribute("class", "DataTableHoverCell")
                    //row.querySelectorAll('td')[i + 1].setAttribute("employeeid", data.Id)
                    row.querySelectorAll('td')[i + 2].setAttribute('style', 'background-color:' + $(data["Day" + i]).attr('cellcolor'))
                }

            },
            fnDrawCallback: function () {
                $('.ToggleSliders').bootstrapToggle({
                    on: 'Ναί',
                    off: 'Όχι'
                });
            },
            initComplete: () => {
                [...document.getElementsByClassName('TableDays')]
                    .forEach(tableHead => {
                        var options = { weekday: 'long', day: 'numeric' };
                        var day = tableHead.id.split('_')[1];

                        //Visual Studio Bug!!! dont break line
                        var currDate = new Date(Date.UTC(@Model.Year, @Model.Month, day, 0, 0, 0));

                        var dayToShow = currDate.toLocaleString('el-GR',
                            options);

                        document.getElementById('thDayNum_' + day)
                            .innerHTML = dayToShow;

                        document.getElementById('tbDayNum_' + day)
                            .innerHTML = dayToShow;
                    });
            }
        });

        const RenderDataFromDatatable = (data ,property)=> {
            if (data[property]!= null)
                return data[property];
            else
                return "";
        }

         const CreateDatatableColumns = () => {
            var columns = []
            columns.push({
                data: "ToggleSlider",
                searchable: false,
                orderable: false,
                render: (a, b, data, d) => RenderDataFromDatatable(data, 'ToggleSlider')
            });
            columns.push({
                data: "FirstName",
                searchable: false,
                orderable: false,
                render: (a, b, data, d) => RenderDataFromDatatable(data, 'FirstName')
            });
            columns.push({
                data: "LastName",
                searchable: false,
                orderable: false,
                render: (a, b, data, d) => RenderDataFromDatatable(data,'LastName')
            });
             //Add days of month
            for (var i = 1; i <= @Model.DaysInMonth; i++)
                columns.push({
                    "data": "Day"+i,
                    "searchable": false,
                    "orderable": false
                    //render: (a, b, data, d) => RenderDataFromDatatable(data, "Day" + i)
                });

            return columns;
        }
    </script>

    <!--    Html Append -->
    <script>
        var AppendPreloadedEmployeeToWorkHour = (workHourId, currNum, employeeId, text) =>
            document.getElementById('WorkHourDivNum_' + workHourId).insertAdjacentHTML('beforeend',
                '<div style="padding-left:40px;" class="row" id="EmployeeRowNum_' + currNum + '">' +
                    '<div style="width: 100%;">' +
                        '<div style="width: 15%; float: left;">&nbsp;</div >' +
                        '<div style="width: 45%; float: left;">' +
                            '<select class="EmployeeSelect2WorkHourNum_' + workHourId + '" id="EmployeesSelect2Num_' + workHourId + '_EmployeeNum_' + currNum + '" style="width:100%" disabled>' +
                                '<option value="' + employeeId + '" selected="selected">' + text + '</option>' +
                            '</select >' +
                            '<span style="display:none;" id="EmployeeSpanWorkHourNum_' + workHourId + '_EmployeeNum_' + currNum + '" class="text-danger EmployeeSelect2Span EmployeeSelect2SpanWorkHourNum_' + workHourId + '"></span>' +
                        '</div >' +
                 '</div >'+
                 '</div >'
            );

        var AppendEmployeeToWorkHour = (workHourId, currNum) =>
            document.getElementById('WorkHourDivNum_' + workHourId).insertAdjacentHTML('beforeend',
                '<div style="padding-left:40px;" class="row" id="EmployeeRowNum_' + currNum + '">' +
                '<div style="width: 100%;">' +
                '<div style="width: 15%; float: left;">&nbsp;</div >' +
                    '<div style="width: 45%; float: left;">' +
                        '<select class="EmployeeSelect2WorkHourNum_' + workHourId + '" id="EmployeesSelect2Num_' + workHourId + '_EmployeeNum_' + currNum + '" style="width:100%"></select >' +
                        '<span style="display:none;" id="EmployeeSpanWorkHourNum_' + workHourId + '_EmployeeNum_' + currNum + '" class="text-danger EmployeeSelect2Span EmployeeSelect2SpanWorkHourNum_' + workHourId + '"></span>' +
                    '</div >' +
                    '<div style="width: 5%; float: left;">&nbsp;</div >' +
                    '<div style="width: 20%; float: left;">' +
                        '<button class= "btn btn-danger EmployeeSelect2DeleteButton EmployeeSelect2DeleteButtonNum_'+workHourId+'" WorkHourId="' + workHourId + '" Num="' + currNum + '"> <i class="fa fa-user EmployeeDeleteButton" WorkHourId="' + workHourId + '" Num="' + currNum + '"></i></button >' +
                    '</div >' +
                    '</div >'+
                '</div >'
            );

        AppendNewWorkHourToAddModal = (workHourId) =>
            document.getElementById('AddWorkHour_ModalBody').insertAdjacentHTML('beforeend',

                '<div style="padding-top:10px;" class= "row ElementToDeleteOnClose WorkHourDiv AppendEmployeeNum_' + workHourId + '" id="WorkHourDivNum_' + workHourId + '">' +
                    '<label style="padding-left:10px;" class="control-label"> Προσθήκη έναρξη - λήξη βάρδιας για εργαζόμενο/ους:</label>' +
                    '<div style="padding-left:40px;" class="row">' +
                        '<input class="calentim hidden calentimInput" id="CalentimInputNum_' + workHourId + '" />' +
                        '<div class="row">' +
                            '<span id="WorkHourErrorSpanNum_' + workHourId + '" class="WorkHourErrorSpan text-danger" style="display: none;"></span>' +
                        '</div>' +
                        '<div style="width: 100%;">' +
                            '<div style="width: 15%; float: left;">' +
                                '<button class="btn btn-primary" id="CalentimButtonNum_' + workHourId + '"><i class="fa fa-calendar" ></i></button>'+
                            '</div>' +
                            '<div style="width: 20%; float: left;">' +
                                'Ημερομηνία: </br> ' +
                                'Ωράριο: </br> ' +
                                'Ημέρες: </br> ' +
                                'Ώρες ανα μέρα: </br>' +
                                'Ώρες συνολο:' +
                            '</div>' +
                            '<div style="width: 35%; float: left;">' +
                                '<span class="DateSpan" id="DateStartOnEndOnNum_' + workHourId + '"></span></br> ' +
                                '<span id="TimeStartOnEndOnNum_' + workHourId + '"></span></br>' +
                                '<span id="TotalDaysNum_' + workHourId + '"></span> </br>' +
                                '<span id="TotalHoursPerDayNum_' + workHourId + '"></span> </br>' +
                                '<span id="TotalHoursNum_' + workHourId + '"></span>' +
                            '</div>' +
                            '<div style="width: 15%; float: left;">' +
                                '<button class="btn btn-danger WorkHourDeleteButton" workhourid="' + workHourId + '"><i class="fa fa-trash-o WorkHourDeleteButton" workhourid="' + workHourId + '"></i></button>' +
                            '</div>' +
                        '</div>' +
                    '</div >' +
                      '<div style="padding-left:40px;" class="row">' +
                        '<div style="width:  100%;">' +
                            '<div style="width: 15%; float: left;">&nbsp;</div >' +
                            '<div style="width: 20%; float: left;"><p> Δήλωση Ημ. ως ρεπό:</p></div>' +
                            '<div style="width: 20%; float: left;"><input  type="checkbox" id="DayOffSliderNum_'+workHourId+'" data-onstyle="success"></div>' +
                        '</div >' +
                    '</div >' +
                    '<div style="padding-left:40px;" class="row">' +
                        '<div style="width:  100%;">' +
                            '<div style="width: 15%; float: left;">&nbsp;</div >' +
                            '<div style="width: 20%; float: left;"><p> Σχόλια:</p></div>' +
                        '</div >' +
                    '</div >' +
                    '<div style="padding-left:40px;" class="row">' +
                        '<div style="width:  100%;">' +
                            '<div style="width: 15%; float: left;">&nbsp;</div >' +
                            '<div style="width: 65%; float: left;">'+
                                '<textarea class="form-control" id="CommentsNum_'+workHourId+'" rows="3"></textarea>'+
                            '</div>' +
                        '</div >' +
                    '</div >' +
                    '<div style="padding-left:40px;" class="row">' +
                        '<div style="width:  100%; max-width:450px;">' +
                            '<div  style="width: 15%; float: left;"><button class="btn btn-success AppendEmployeeToWorkHourButton" id="AppendEmployeeToWorkHourButtonNum_'+workHourId+'" Num="' + workHourId + '"><i class="fa fa-plus " Num="' + workHourId + '"></i><i class="fa fa-user " Num="' + workHourId + '"></i></button></div>' +
                            '<div  style="width: 20%; float: left;"><p> Υπάλληλοι:</p></div>' +
                        '</div >' +
                    '</div >' +
                '</div >');

        AppendNewWorkHourToEditModal = (workHourId) =>
            document.getElementById('EditWorkHour_ModalBody').insertAdjacentHTML('beforeend',

                '<div style="padding-top:10px;" class= "row ElementToDeleteOnClose WorkHourDiv AppendEmployeeNum_' + workHourId + '" id="WorkHourDivNum_' + workHourId + '">' +
                    '<label style="padding-left:10px;" class="control-label"> Επεξεργασία βάρδιας κελιού για εργαζόμενο/ους:</label>' +
                    '<div style="padding-left:40px;" class="row">' +
                        '<input style="display:none;" id="DatabaseDateStartNum_' + workHourId + '" />' +
                        '<input style="display:none;" id="DatabaseDateEndNum_' + workHourId + '" />' +
                        '<input style="display:none;" id="DatabaseDayOffSliderNum_' + workHourId + '" />' +
                        '<input style="display:none;" id="DatabaseCommentsNum_' + workHourId + '" />' +
                        '<input style="display:none;" id="CalentimInputNum_' + workHourId + '" class="calentimInput" />' +
                        '<div class="row"><span id="WorkHourErrorSpanNum_' + workHourId + '" class="WorkHourErrorSpan text-danger" style="display: none;"></span></div>' +
                        '<div style="width: 100%;">' +
                            '<div style="width: 15%; float: left;">' +
                                '<button style="display: none;" class="btn btn-primary" id="CalentimButtonNum_' + workHourId + '"><i class="fa fa-calendar" ></i></button>' +
                            '</div>' +
                            '<div style="width: 20%; float: left;">' +
                                'Ημερομηνία: </br> ' +
                                'Ωράριο: </br> ' +
                                '<span style="display: none;"  id="LeftDateOnNum_' + workHourId + '"><span>Νέα Ημερομηνία:  </span></br></span>' +
                                '<span style="display: none;" id="LeftTimeOnNum_' + workHourId + '"><span>Νέο ωράριο:    </span></br></span>' +
                                'Ημέρες: </br> ' +
                                'Ώρες ανα μέρα: </br>' +
                                'Ώρες συνολο: </br>' +
                            '</div>' +
                            '<div style="width: 30%; float: left;">' +
                                '<span class="DateSpan IsEdit" id="DateStartOnEndOnNum_' + workHourId + '"></span></br> ' +
                                '<span  id="TimeStartOnEndOnNum_' + workHourId + '"></span></br>' +
                                '<span style="display:none;"><span id="NewDateStartOnEndOnNum_' + workHourId + '"></span></br> </span>' +
                                '<span style="display:none;"><span id="NewTimeStartOnEndOnNum_' + workHourId + '"></span></br></span>' +
                                '<span id="TotalDaysNum_' + workHourId + '"></span> </br>' +
                                '<span id="TotalHoursPerDayNum_' + workHourId + '"></span> </br>' +
                                '<span id="TotalHoursNum_' + workHourId + '"></span>' +
                            '</div>' +
                            '<div style="width: 20%; float: left;">' +
                                '<button style="display: none;" class="btn btn-primary WorkHourSaveButton" id="WorkHourSaveButtonNum_' + workHourId + '" workhourid="' + workHourId + '"><i class="fa fa-floppy-o WorkHourSaveButton" workhourid="' + workHourId + '"></i></button>' +
                                '<button style="display: none;" class="btn btn-primary WorkHourUndoButton" id="WorkHourUndoButtonNum_' + workHourId + '" workhourid="' + workHourId + '"><i class="fa fa-ban WorkHourUndoButton" workhourid="' + workHourId + '"></i></button>' +
                                '<button style="display: none;" class="btn btn-danger  WorkHourDeleteButton" id="WorkHourDeleteButtonNum_' + workHourId + '" workhourid="' + workHourId + '" ><i class="fa fa-trash-o WorkHourDeleteButton" workhourid="' + workHourId + '" ></i></button>' +
                                '<button class="btn btn-warning WorkHourEditButton" id="WorkHourEditButtonNum_' + workHourId + '" workhourid="' + workHourId + '"><i class="fa fa-pencil WorkHourEditButton" workhourid="' + workHourId + '"></i></button>' +
                            '</div>' +
                        '</div>' +
                    '</div >' +
                    '<div style="padding-left:40px;" class="row">' +
                        '<div style="width:  100%;">' +
                            '<div style="width: 15%; float: left;">&nbsp;</div >' +
                            '<div style="width: 20%; float: left;"><p> Δήλωση Ημ. ως ρεπό:</p></div>' +
                            '<div style="width: 20%; float: left;"><input disabled type="checkbox" id="DayOffSliderNum_'+workHourId+'" data-onstyle="success"></div>' +
                        '</div >' +
                    '</div >' +
                      '<div style="padding-left:40px;" class="row">' +
                        '<div style="width:  100%;">' +
                            '<div style="width: 15%; float: left;">&nbsp;</div >' +
                            '<div style="width: 20%; float: left;"><p> Σχόλια:</p></div>' +
                        '</div >' +
                    '</div >' +
                    '<div style="padding-left:40px;" class="row">' +
                        '<div style="width:  100%;">' +
                            '<div style="width: 15%; float: left;">&nbsp;</div >' +
                            '<div style="width: 65%; float: left;">'+
                                '<textarea class="form-control" id="CommentsNum_'+workHourId+'" rows="3" disabled></textarea>'+
                            '</div>' +
                        '</div >' +
                    '</div >' +
                    '<div style="padding-left:40px;" class="row">' +
                        '<div style="width:  100%;">' +
                            '<div  style="width: 15%; float: left; "><button style="display:none;" class="btn btn-success AppendEmployeeToWorkHourButton" id="AppendEmployeeToWorkHourButtonNum_' + workHourId + '" Num="' + WorkHourId + '"><i class="fa fa-plus " Num="' + WorkHourId + '"></i><i class="fa fa-user " Num="' + WorkHourId + '"></i></button></div>' +
                            '<div  style="width: 20%; float: left;"><p> Υπάλληλοι:</p></div>' +
                        '</div >' +
                    '</div >' +
                '</div >');

       
        var AppendPreloadedEmployeeToWorkHourToEditModal = (workHourId, currNum,employeeId, text) =>
            document.getElementById('WorkHourDivNum_' + workHourId).insertAdjacentHTML('beforeend',
                '<div style="padding-left:40px;" class="row Preloaded" id="EmployeeRowNum_' + currNum + '">' +
                    '<div style="width: 100%;">' +
                        '<div style="width: 15%; float: left;">&nbsp;</div >' +
                        '<div style="width: 45%; float: left;">' +
                            '<select class="EmployeeSelect2WorkHourNum_' + workHourId + '" id="EmployeesSelect2Num_' + workHourId + '_EmployeeNum_' + currNum + '" style="width:100%" disabled>' +
                                '<option value="' + employeeId + '" selected="selected">' + text + '</option>' +
                            '</select >' +
                            '<span style="display:none;" id="EmployeeSpanWorkHourNum_' + workHourId + '_EmployeeNum_' + currNum + '" class="text-danger EmployeeSelect2Span EmployeeSelect2SpanWorkHourNum_' + workHourId + '"></span>' +
                        '</div >' +
                        '<div style="width: 5%; float: left;">&nbsp;</div >' +
                        '<div style="width: 20%; float: left;">' +
                '<button  style="display:none;" class= "btn btn-danger EmployeeSelect2DeleteButton EmployeeSelect2DeleteButtonNum_' + workHourId + '" WorkHourId="' + workHourId + '" Num="' + currNum + '"> <i class="fa fa-user EmployeeDeleteButton" WorkHourId="' + workHourId + '" Num="' + currNum + '"></i></button >' +
                        '</div >' +
                    '</div >'+
                '</div >'
            );
    </script>
}
