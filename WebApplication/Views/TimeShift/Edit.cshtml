@model DataAccess.Models.Entity.TimeShift

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row">
    <div class="col-md-3"> </div>
    <div class="col-md-6">
        <div class="box box-danger" style="margin-top:5%;">

            <div class="box-header">
                <h3 class="box-title">@ViewData["Title"]</h3>
                <div class="pull-right">
                    <button asp-action="Index" class="btn btn-primary">Πίσω στην λίστα</button>
                </div>
            </div>

            <hr />

            <form asp-controller="TimeShift" asp-action="Edit" method="post">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                <div class="box-body">

                    <div class="form-group">
                        <label asp-for="Title" class="control-label"></label>

                        <div class="input-group">
                            <input asp-for="Title" class="form-control" />
                            <span asp-validation-for="Title" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="form-group">
                        <label asp-for="Year" class="control-label"></label>

                        <div class="input-group">
                            <input asp-for="Year" class="form-control" />
                            <span asp-validation-for="Year" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="form-group">
                        <label asp-for="Month" class="control-label"></label>
                        <div class="input-group">
                            <input asp-for="Month" class="form-control" />
                            <span asp-validation-for="Month" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="form-group">
                        <label asp-for="WorkPlaceId" class="control-label"></label>
                        <div class="input-group" style="width:100%">
                            <select class="WorkPlace_Select2" asp-for="WorkPlaceId" style="width:70%">
                                <option value="@Model.WorkPlaceId" selected="selected">@Model.WorkPlace.Title</option>
                            </select>
                            <span asp-validation-for="WorkPlaceId" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="form-group pull-right">
                        <input type="submit" value="Αποθήκευση" class="btn btn-primary " />
                    </div>

                </div>
            </form>
        </div>
    </div>
    <div class="col-md-3"> </div>
</div>


<div class="row">
    <div class="col-md-12">

        <div class="box box-danger" style="margin-top:5%;">

            <div class="box-header">
                <h3 class="box-title"></h3>
            </div>
            <hr />
            <div class="box-body table-responsive">

                <table id="EmployeesWorkhoursDatatable" class="table table-bordered table-hover table-responsive">
                    <thead>
                        <tr>
                            <th>Επιλογή</th>
                            <th>Όνομα</th>
                            <th>Επίθετο</th>
                            @for (int i = 0; i < Model.DaysInMonth; i++)
                            {
                                <th>@i+1</th>
                            }
                        </tr>
                    </thead>
                    <tfoot>
                        <tr>
                            <th data-searchable="false">Επιλογή</th>
                            <th data-searchable="false">Όνομα</th>
                            <th data-searchable="false">Επίθετο</th>
                            @for (int i = 0; i < Model.DaysInMonth; i++)
                            {
                                <th data-searchable="false">@i+1</th>

                            }
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    </div>
</div>



<div class="modal fade in" id="AddWorkHour_Modal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
                <h4 class="modal-title">Default Modal</h4>
            </div>
            <div class="modal-body" id="AddWorkHour_ModalBody">

                <div class="row" style="padding-top:10px; padding-bottom:15px;">
                    <div class="col-md-2"></div>
                    <div class="col-md-6">
                        <label>Προσθήκη επιπλέων βάρδιας  </label>
                    </div>
                    <div class="col-md-4">
                        <button class="btn btn-success" id="AppendWorkHour"><i class="fa fa-plus-square"></i></button>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default pull-left" data-dismiss="modal">Κλείσιμο</button>
                <button type="button" class="btn btn-primary" id="SaveWorkHours">Αποθήκευση αλλαγών</button>
            </div>
        </div>
    </div>
</div>



<div class="modal fade in" id="EditWorkHour_Modal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
                <h4 class="modal-title">Επεξεργασία ωρών χρήστη</h4>
            </div>
            <div class="modal-body" id="EditWorkHour_ModalBody">


            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default pull-left" data-dismiss="modal">Κλείσιμο</button>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        var WorkHourId = 0;
        $(document).ready(function () {
            Datatable();
        });



        var CelentimDate = "";
        const ConvertDate = (date) => moment(date, 'DD/MM/YYYY HH:mm').format("MM/DD/YYYY HH:mm")
        const GMTtoUTCconverter = (GMTtime) => Date.UTC(
            GMTtime.getUTCFullYear(),
            GMTtime.getUTCMonth(),
            GMTtime.getUTCDate(),
            GMTtime.getUTCHours(),
            GMTtime.getUTCMinutes(),
            GMTtime.getUTCSeconds());
        const TimeConverter = (GMTtime, hasLaterDate) => {
            var date = new Date(GMTtoUTCconverter(GMTtime));
            var year = date.getFullYear();
            var month = String((date.getMonth() + 1)).length == 1 ?
                '0' + (date.getMonth() + 1) : (date.getMonth() + 1);
            var day = String(date.getDate()).length == 1 ?
                '0' + date.getDate() : date.getDate();
            var hour = String(date.getHours()).length == 1 ?
                '0' + date.getHours() : date.getHours();
            var min = String(date.getMinutes()).length == 1 ?
                '0' + date.getMinutes() : date.getMinutes();

            if (hasLaterDate)
                day++;
            var time = year + '-' + month + '-' + day + 'T' + hour + ':' + min;
            return time;
        }

    </script>


    <!--///////////////////////////////////////-->
    <!--///             Validation          ///-->
    <!--///////////////////////////////////////-->

    <script>
        const ValidateNullInputs = (workHourId) => {
            var hasError = false;
            GetWorkHourIdsForNullDateInputs().filter(nullWorkHourid =>
                nullWorkHourid == workHourId).forEach(workHourId => {
                    hasError = true;
                    HandleWorkHourSpan(workHourId,
                        'Πρέπει να εισαχθεί ημερομηνία απο το ημερολόγιο!');
                });
            return hasError;
        };
        //Show wrong date in fake span, just to show to user
        const ValidateAndAppendWorkHourRange = (workHourId) => {
            var splitedDate = $("#CalentimInputNum_" + workHourId)[0].value.split('/-/');
            var start = new Date(ConvertDate(splitedDate[0]));
            var end = new Date(ConvertDate(splitedDate[1]));

            if (start.getTime() >= end.getTime())
                HandleWorkHourSpan(workHourId, 'Η ημερομηνία έναρξης πρεπει να είναι προγενέστερη απο της λήξης')
            document.getElementById('StartOnNum_' + workHourId).innerText = splitedDate[0];
            document.getElementById('EndOnNum_' + workHourId).innerText = splitedDate[1];
            document.getElementById('TotalHoursNum_' + workHourId).innerText = FindHourDifference(start, end);

        }

        const AreDatesOverlaping = (baseDate, checkDate) => {
            if ((baseDate[0] <= checkDate[0] && checkDate[0] <= baseDate[1]) ||
                (baseDate[0] <= checkDate[1] && checkDate[1] <= baseDate[1]) ||
                (checkDate[0] < baseDate[0] && baseDate[1] < checkDate[1]) == true)
                return true;
            return false
        }
        const ValidateEmployeesWithRangeToWorkhour = (workHourId) =>
            $.ajax({
                type: "POST",
                url: '/api/workhours/hasoverlap',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: JSON.stringify(BuildValidateDto(workHourId))
            }).done((responses) => {
                HandleEmployeeSelect2SpanPerWorkHour(undefined, undefined, workHourId)
                responses.forEach((response) => {
                    HandleEmployeeSelect2SpanPerWorkHour(
                        'EmployeeSpanWorkHourNum_' + workHourId + '_EmployeeNum_' +
                        GetSelect2NumBySelectedEmployeeIdAndWorkHourId(response.employeeId, workHourId),
                        response
                    );
                });
                HandleSubmitButton();
            });

        const ValidateAppendedWorkHoursTimeRange = (workHourId) => {
            var workHourIdFiltered = GetWorkHourIdsForNullDateInputs().filter(nullWorkHourId => nullWorkHourId == WorkHourId);
            if (workHourIdFiltered.length == 0)
                GetAllDateInputValuesFiltered(workHourId, GetWorkHourIdsForNullDateInputs()).forEach(response => {
                    if (AreDatesOverlaping(response.startEndDate, GetDateInputValues(workHourId))) {
                        HandleWorkHourSpan(response.workHourId, 'Αυτό το ωράριο επειρεάζει ενα υπάρχων ωράριο');
                        HandleWorkHourSpan(workHourId, 'Αυτό το ωράριο επειρεάζει ενα υπάρχων ωράριο');

                    }
                })
        };
    </script>





    <!--///////////////////////////////////////-->
    <!--///             DTOs                ///-->
    <!--///////////////////////////////////////-->

    <script>
          const BuildHasOverlapWorkHourDto = (start,end) => ({
            timeShiftId: @Model.Id,
            startOn: TimeConverter(new Date(ConvertDate(start)), false),
            endOn: TimeConverter(new Date(ConvertDate(end)), false)
        });

          const BuildSelect2DtoNum = (params, workHourId) => ({
                timeShiftId: @Model.Id,
                search: params.term,
                page: params.page || 1,
            existingEmployees: GetWorkHourEmployeeIds(workHourId)
        });

        const BuildSelect2Dto = (params) => ({
                timeShiftId: @Model.Id,
                search: params.term,
                page: params.page || 1
        });

          const BuildValidateDto = ( workHourId) => ({
            timeShiftId:@Model.Id,
            startOn: TimeConverter(
                new Date(ConvertDate(GetDateInputValues(workHourId)[0])), false),
            endOn: TimeConverter(
                new Date(ConvertDate(GetDateInputValues(workHourId)[1])), false),
            employeeIds: GetAlreadyAppendedEmployeeIdsPerWorkHour(workHourId)
        });

        var MapData = (dateInput, employeeId) =>
         ({
            startOn: ConvertDate(dateInput.value.split('/-/')[0]),
            endOn: ConvertDate(dateInput.value.split('/-/')[1]),
            timeShiftId:@Model.Id,
            employeeId: employeeId
        });
    </script>


    <!--///////////////////////////////////////-->
    <!--///             Functions           ///-->
    <!--///////////////////////////////////////-->

    <script>
        const FindHourDifference = (startOn, endOn) =>
            (endOn.valueOf() - startOn.valueOf()) / 1000 / 60 / 60;

        const GetWorkHourEmployeeIds = (num) =>
            [...document.getElementsByClassName('EmployeeSelect2WorkHourNum_' + num)]
                .map((data) => data.value).filter((val) => val != "");

        const GetAllWorkHourIds = () =>
            [...document.getElementsByClassName('WorkHourDiv')]
                .map(div => div.id.split('_')[1]);

        const GetDateInputValues = (workHourId) => {
            return document.getElementById('CalentimInputNum_' + workHourId).value
                .split('/-/');
        };

        const GetAllDateInputValuesFiltered = (workHourId, excludeWorkHourIds) => {
            var response = [...document.getElementsByClassName('calentimInput')]
                .filter(input => input.id != 'CalentimInputNum_' + workHourId);

            for (var i = 0; i < excludeWorkHourIds.length; i++)
                response = response.filter(input =>
                    input.id != 'CalentimInputNum_' + excludeWorkHourIds[i]);

            return response.map(input => ({
                startEndDate: input.value.split('/-/'),
                workHourId: input.id.split('_')[1]
            }));
        }

        const GetWorkHourIdsForNullDateInputs = () => {
            var response = [];
            [...document.getElementsByClassName('TimeSpan')].forEach(input => {
                if (input.innerHTML == '')
                    response.push(input.id.split('_')[1]);

            });
            return response;
        }

        //Get Select2 EmployeeNum by employeeId and workHourId-- >
        const GetSelect2NumBySelectedEmployeeIdAndWorkHourId = (employeeId, workHourId) => document
            .querySelectorAll('select.EmployeeSelect2WorkHourNum_' + workHourId + ' > option[value="' + employeeId + '"]')[0]
            .parentElement.id
            .split('_')[3]

        const GetAlreadyAppendedEmployeeIdsPerWorkHour = (num) =>
            [...document.getElementsByClassName('EmployeeSelect2WorkHourNum_' + num + '')]
                .map((data) => data.value)
                .filter((val) => val != "");

        const GetSliderCheckedEmployeeIds = () => {
            var prependEmployeeIds = [];
            [...document.getElementsByClassName('ToggleSliders')]
                .forEach((slider) => {
                    if (slider.checked)
                        prependEmployeeIds.push(slider.getAttribute('employeeid'));
                });
            return prependEmployeeIds;
        }
    </script>


    <!--///////////////////////////////////////-->
    <!--///             Handlers            ///-->
    <!--///////////////////////////////////////-->
    <script>

        //Submit button handler
        const HandleSubmitButton = () => {
            var select2Span = [...document.getElementsByClassName('EmployeeSelect2Span')].filter(span =>
                span.style.display !== "none");

            var workHourSpan = [...document.getElementsByClassName('WorkHourErrorSpan')].filter(span =>
                span.style.display !== "none");

            if (workHourSpan.length > 0 || select2Span.length > 0)
                document.getElementById('SaveWorkHours').disabled = true;
            else
                document.getElementById('SaveWorkHours').disabled = false;
        }

        //WorkHour Span handler
        const HandleWorkHourSpan = (workHourId, errorMessage) => {
            if (errorMessage != undefined && workHourId != undefined) {
                var span = document
                    .getElementById('WorkHourErrorSpanNum_' + workHourId);
                span.style = "display:;";
                if (!span.innerHTML.includes(errorMessage))
                    span.innerHTML += errorMessage + '</br>';
            }
            else if (workHourId != undefined)
                [...document.getElementsByClassName('WorkHourErrorSpan')]
                    .filter(span => span.id == 'WorkHourErrorSpanNum_' + workHourId)
                    .forEach((span) => {
                        span.innerHTML = '';
                        span.style = "display:none;"
                    });
        }

        const HandleEmployeeSelect2SpanPerWorkHour = (elementId, response, workHourId) => {
            if (workHourId != undefined && elementId == undefined && response == undefined)
                [...document.getElementsByClassName('EmployeeSelect2SpanWorkHourNum_' + workHourId)]
                    .forEach(span => {
                        span.innerHTML = '';
                        span.style = "display:none;"
                    });
            else if (elementId != undefined) {
                var span = document.getElementById(elementId)
                if (response.isSuccessful) {
                    span.style = "display:none;";
                }
                else {
                    span.style = "display:;";
                    span.innerHTML = response.value;
                }
            }
            else
                [...document.getElementsByClassName('EmployeeSelect2Span')]
                    .forEach((span) => span.style = "display:none;");
        }

    </script>


    <!--    Modal 'Edit'  Functionality   -->
    <script>
        $('#EmployeesWorkhoursDatatable').on('click', '.faIconEdit', (element) => {
            var day = element.target.getAttribute('dayofmonth');
            var month = document.getElementById('Month').value;
            var year = document.getElementById('Year').value;

            //set global variable the date to initialize celentim
            CelentimDate = year + '-' + month + '-' + day;

            var JsonData = {
                startOn: CelentimDate,
                endOn: CelentimDate,
                timeShiftId: element.target.getAttribute('timeshiftid'),
                employeeId: element.target.getAttribute('employeeid')
            }

            $.ajax({
                type: "POST",
                url: "/api/workhours/getForCell",
                data: JSON.stringify(JsonData),
                contentType: "application/json; charset=utf-8",
                dataType: "json"

            }).done((workHours) => workHours.forEach((workHour) => AppendDataInModal(workHour)));


            const EditHtml = (workHour) =>
                '<div style="padding-top:10px;" class="row ElementToDeleteOnClose" id="WorkHourRowNum_' + workHour.id + '">' +
                '<div class="col-md-1"></div>' +
                '<div class="col-md-1"><button style="display:none;" class="btn btn-primary" id="CalentimButtonNum_' + workHour.id + '"><i class="fa fa-calendar" ></i></button></div>' +
                '<div class="col-md-7">' +
                '<input class="calentim hidden calentimInput" id="CalentimInputNum_' + workHour.id + '" />' +
                '<div class="row">' +
                '<div class="col-md-4">' +
                'Έναρξη:</br>' +
                'Λήξη:</br>' +
                'Ώρες εργ.:' +
                '</div>' +
                '<div class="col-md-8">' +
                '<span id="StartOnNum_' + workHour.id + '">' + workHour.startOn + '</span> </br> ' +
                '<span id="EndOnNum_' + workHour.id + '">' + workHour.endOn + '</span></br>' +
                '<span id="TotalHoursNum_' + workHour.id + '"></span>' +
                '</div>' +
                '<span id="WorkHourErrorSpanNum_' + workHour.id + '" style="display: none; color:red;">Η ημερομηνία έναρξης πρεπει να είναι προγενέστερη απο της λήξης</span>' +
                '</div>' +
                '</div>' +
                '<div class="col-md-3 btn-group">' +
                '<button class="btn btn-warning CelentimEditFormEditButton" id="EditModalEditButtonNum_' + workHour.id + '"  employeeid ="' + workHour.employeeId + '" workHourId="' + workHour.id + '"><i class="fa fa-pencil CelentimEditFormEditButton" id="EditModalEditFaFaNum_' + workHour.id + '"  employeeid ="' + workHour.employeeId + '" workHourId="' + workHour.id + '"></i></button>' +
                '<button class="btn btn-danger  CelentimEditFormDeleteButton" style="display:none;" id="EditModalDeleteButtonNum_' + workHour.id + '"  workHourId="' + workHour.id + '"><i class="fa fa-trash-o  CelentimEditFormDeleteButton" id="EditModalDeleteFaFaNum_' + workHour.id + '" workHourId="' + workHour.id + '"></i></button>' +
                '</div>' +
                '</div >';

            const AppendDataInModal = (workHour) => {
                document.getElementById('EditWorkHour_ModalBody')
                    .insertAdjacentHTML('beforeend', EditHtml(workHour));
                Calentim(CelentimDate, workHour.id);//set new Celentim instance
            };

            $('#EditWorkHour_Modal').modal('show')
        });

        //Edit Date in modal
        $('#EditWorkHour_Modal').on('click', '.CelentimEditFormEditButton', (element) => {
            var workHourId = element.target.getAttribute('workhourid')
            var EditModalEditButton = document.getElementById('EditModalEditButtonNum_' + workHourId);
            var EditModalFaFa = document.getElementById('EditModalEditFaFaNum_' + workHourId);

            document.getElementById('EditModalDeleteButtonNum_' + workHourId).style.display = 'block';
            document.getElementById('CalentimButtonNum_' + workHourId).style.display = 'block';

            EditModalEditButton.classList.remove('btn-warning');
            EditModalEditButton.classList.remove('CelentimEditFormEditButton');
            EditModalEditButton.classList.add('btn-success');
            EditModalEditButton.classList.add('CelentimEditFormSaveButton');

            EditModalFaFa.classList.remove('fa-pencil');
            EditModalFaFa.classList.remove('CelentimEditFormEditButton');
            EditModalFaFa.classList.add('fa-floppy-o');
            EditModalFaFa.classList.add('CelentimEditFormSaveButton');
        })

        //Save edited Date in modal
        $('#EditWorkHour_Modal').on('click', '.CelentimEditFormSaveButton', (element) => {
            var workHourId = element.target.getAttribute('workhourid')
            var EditModalEditButton = document.getElementById('EditModalEditButtonNum_' + workHourId);
            var EditModalFaFa = document.getElementById('EditModalEditFaFaNum_' + workHourId);
            var EditModalInput = document.getElementById('CalentimInputNum_' + workHourId);

            var dataPUT = MapData(EditModalInput, element.target.getAttribute('employeeid'));
            dataPUT.id = workHourId;
            document.getElementById('EditModalDeleteButtonNum_' + workHourId).style.display = 'none';
            document.getElementById('CalentimButtonNum_' + workHourId).style.display = 'none';
            $.ajax({
                type: "PUT",
                url: "/api/workhours/" + workHourId,
                data: JSON.stringify(dataPUT),
                contentType: "application/json; charset=utf-8",
                dataType: "json"

            })

            EditModalEditButton.classList.remove('btn-success');
            EditModalEditButton.classList.remove('CelentimEditFormSaveButton');
            EditModalEditButton.classList.add('btn-warning');
            EditModalEditButton.classList.add('CelentimEditFormEditButton');

            EditModalFaFa.classList.remove('fa-floppy-o');
            EditModalFaFa.classList.remove('CelentimEditFormSaveButton');
            EditModalFaFa.classList.add('fa-pencil');
            EditModalFaFa.classList.add('CelentimEditFormEditButton');
        })

        //Delete Workhour in modal
        $('#EditWorkHour_Modal').on('click', '.CelentimEditFormDeleteButton', (element) => {
            var workHourId = element.target.getAttribute('workhourid')

            $.ajax({ type: "DELETE", url: "/api/workhours/" + workHourId })
                .done(() => $('#WorkHourRowNum_' + workHourId).remove());
        })

        //Cleanup on modal close
        $('#EditWorkHour_Modal').on('hidden.bs.modal', (e) => {
            $('.ElementToDeleteOnClose').remove();
            $('#EmployeesWorkhoursDatatable').DataTable().clear().destroy();
            Datatable();
        })
    </script>


    <!--    Modal 'Add'  Functionality   -->
    <script>
        $('#EmployeesWorkhoursDatatable').on('click', '.faIconAdd', (element) => {
            var day = element.target.getAttribute('dayofmonth');
            var month = document.getElementById('Month').value;
            var year = document.getElementById('Year').value;

            //set global variable the date to initialize celentim
            CelentimDate = year + '-' + month + '-' + day;
            $('#SaveWorkHours').attr('employeeid', element.target.getAttribute('employeeid'));
            $('#AppendWorkHour').attr('employeeid', element.target.getAttribute('employeeid'));
            $('#AddWorkHour_Modal').modal('show')
        });

        //Append new workhour to modal
        $('#AppendWorkHour').on('click', (e) => {
            //Get id from element or father element
            var employeeId = e.target.getAttribute('employeeid');
            if (employeeId == null)
                employeeId = e.target.parentElement.getAttribute('employeeid');

            var prependEmployeeIds = GetSliderCheckedEmployeeIds();
            WorkHourId++;
            AppendNewWorkHourToAddModal(WorkHourId);  //Append html to add modal
            Calentim(CelentimDate, WorkHourId);       //set new Calentim instance

            var num = WorkHourId;
            if (prependEmployeeIds.length > 0)
                prependEmployeeIds.forEach((employeeId) => {
                    $.get("/api/employees/getSelect2Option/" + employeeId, (data) => {
                        AppendPreloadedEmployeeToWorkHour(num, ++WorkHourId, employeeId, data.results[0].text);
                        EmployeeSelect2(num, WorkHourId);        //set new Select2 instance
                    });
                });
            else
                $.get("/api/employees/getSelect2Option/" + employeeId, (data) => {
                    AppendPreloadedEmployeeToWorkHour(num, ++WorkHourId, employeeId, data.results[0].text);
                    EmployeeSelect2(num, WorkHourId);        //set new Select2 instance
                });

            ValidateNullInputs(WorkHourId);
            HandleSubmitButton();
        });

        //Append new Select2 Employees search for WorkHour
        $('#AddWorkHour_Modal').on('click', '.AppendEmployeeToWorkHourButton', (e) => {
            var currentWorkHourId = e.target.getAttribute('num');
            WorkHourId++;
            AppendEmployeeToWorkHour(currentWorkHourId, WorkHourId)
            EmployeeSelect2(currentWorkHourId, WorkHourId);        //set new Select2 instance
        });

        //Delete Workhour from modal
        $('#AddWorkHour_Modal').on('click', '.celentimDeleteButton', (e) => {
            var workHourId = e.target.getAttribute('celentimid');
            $('#WorkHourRowNum_' + workHourId).remove();
            if (!ValidateNullInputs(workHourId))
                ValidateAppendedWorkHoursTimeRange(workHourId);
            HandleSubmitButton();
        })

        //Delete Employee from workhour
        $('#AddWorkHour_Modal').on('click', '.EmployeeRowDeleteButton', (e) => {
            var elemId = e.target.getAttribute('num');
            var workHourId = e.target.getAttribute('workhourid');
            $('#EmployeeRowNum_' + elemId).remove();
            if (!ValidateNullInputs(workHourId))
                ValidateEmployeesWithRangeToWorkhour(workHourId);

            HandleSubmitButton();
        })

        //Save Button
        $('#SaveWorkHours').on('click', e => {
            var dataToPost = [];
            var dateInputs = [...document.getElementsByClassName('calentimInput')];

            for (var i = 0; i < dateInputs.length; i++) {
                if (dateInputs[i].value == "")
                    return;

                var workHourId = dateInputs[i].id.split('_')[1];
                var employeeIds = GetWorkHourEmployeeIds(workHourId);
                for (var j = 0; j < employeeIds.length; j++)
                    dataToPost.push(MapData(dateInputs[i], employeeIds[j]));
            }

            $.ajax({
                type: "POST",
                url: "/api/workhours/addEmployeeWorkhours",
                data: JSON.stringify(dataToPost),
                contentType: "application/json; charset=utf-8",
                dataType: "json"

            });
            $('#AddWorkHour_Modal').modal('hide');
        });

        //Cleanup on modal close
        $('#AddWorkHour_Modal').on('hidden.bs.modal', e => {
            $('.ElementToDeleteOnClose').remove();
            $('#EmployeesWorkhoursDatatable').DataTable().clear().destroy();
            Datatable();
            count = 0;
        })
    </script>



    <!--    Datatable Hover    -->
    <script>
        //Make Datatable cell set/unset backround grey and show/hide <i>
        $('#EmployeesWorkhoursDatatable')
            .on('mouseenter', '.DataTableHoverCell', elem =>
                elem.target.querySelectorAll('i')
                    .forEach(element => element.classList.remove("hidden"))
            )
            .on('mouseleave', '.DataTableHoverCell', elem =>
                elem.target.querySelectorAll('i')
                    .forEach(element => element.classList.add("hidden"))
            );

        //Cursor change - mouse over <i> Edit
        $('#EmployeesWorkhoursDatatable')
            .on('mouseenter', '.faIconEdit', elem => {
                elem.target.setAttribute("style", "cursor:pointer");
            })
            .on('mouseleave', '.faIconEdit', elem => {
                elem.target.setAttribute("style", "cursor:");
            });

        //Cursor change - mouse over <i> Add
        $('#EmployeesWorkhoursDatatable')
            .on('mouseenter', '.faIconAdd', (elem) => {
                elem.target.setAttribute("style", "cursor:pointer");
            })
            .on('mouseleave', '.faIconAdd', (elem) => {
                elem.target.setAttribute("style", "cursor:");
            });
    </script>



    <!--///////////////////////////////////////-->
    <!--///             Libraries           ///-->
    <!--///////////////////////////////////////-->
    <!-- Select 2-->
    <script>
        $('.WorkPlace_Select2').select2({
            ajax: {
                url: '/api/workplaces/select2',
                data: function (params) {
                    var query = {
                        search: params.term,
                        page: params.page || 1
                    }
                    return query;
                }
            }
        });
    </script>

    <!--Employees Select2 -->
    <script>
        const EmployeeSelect2 = (workHourId, num) => {
            $('#EmployeesSelect2Num_' + workHourId + '_EmployeeNum_' + num).select2({
                ajax: {
                    type: "POST",
                    url: '/api/employees/select2',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: function (params) {
                        if (num != null)
                            return JSON.stringify(BuildSelect2DtoNum(params, workHourId));
                        else
                            return JSON.stringify(BuildSelect2Dto(params));
                    }
                }
            }).on('change', (e) => {
                if (!ValidateNullInputs(workHourId)) {
                    ValidateEmployeesWithRangeToWorkhour(workHourId);
                }
                HandleSubmitButton();

            });
        }
    </script>

    <!-- Calentim -->
    <script>
        var Calentim = (currentDate, workHourId) => {
            //$("#CallendarButtonNum_" + workHourId).data("calentim").destroy();
            $('#CalentimButtonNum_' + workHourId).calentim({
                dateSeparator: '/-/',
                startOnMonday: true,
                dontPrefixHours: false,
                format: "DD/MM/YYYY HH:mm",
                hourFormat: 24,
                calendarCount: 1,
                minuteSteps: 15,
                showHeader: false,
                showButtons: true,
                locale: "el",
                target: $("#CalentimInputNum_" + workHourId),
                showOn: "right",
                rangeOrientation: "vertical",
                ranges: [
                    {
                        title: "Χτές και ημέρα κελιού",
                        startDate: moment(currentDate).subtract(1, 'days'),
                        endDate: moment(currentDate)
                    },
                    {
                        title: "Ημέρα κελιού",
                        startDate: moment(currentDate),
                        endDate: moment(currentDate)
                    },
                    {
                        title: "Ημέρα κελιού και άυριο",
                        startDate: moment(currentDate),
                        endDate: moment(currentDate).add(1, 'days')
                    }
                ],
                disabledRanges: [
                    {
                        start: moment("01/01/1700", "DD/MM/YYYY"),//Earliest date in docs
                        end: moment(currentDate).set('date', 0)
                    },
                    {
                        start: moment(currentDate).add(1, 'month').set('date', 1),
                        end: moment("31/12/4000", "DD/MM/YYYY")//Latest date in docs
                    }],
                onbeforehide: (calentim) => {

                    HandleWorkHourSpan(workHourId);
                    ValidateAndAppendWorkHourRange(workHourId);
                    if (!ValidateNullInputs(workHourId)) {
                        ValidateAppendedWorkHoursTimeRange(workHourId);
                        ValidateEmployeesWithRangeToWorkhour(workHourId);
                    }

                },
                onaftershow: () => {
                    //Fix Calentim width
                    [...document.getElementsByClassName('calentim-input')]
                        .forEach((calentim) =>
                            calentim.setAttribute('style', 'width: 600px;'));
                }
            })
        };
    </script>

    <!-- Datatable -->
    <script>
           var Datatable = ()=>  $('#EmployeesWorkhoursDatatable').DataTable({
               serverSide: true,
               responsive: true,
               colReorder: true,
               processing: true,
               language: {
                   processing: '<i class="fa fa-spinner fa-spin fa-3x fa-fw"></i><span class="sr-only"></span> '
               },
                dom: 'frtlp',
                ajax: {
                    url: '/api/employees/getdatatable',
                    type: 'POST',
                    contentType: "application/json",
                    data: (data, type, row, meta) => {

                        data.predicate = 'TimeShiftEdit';
                        data.genericId =@Model.Id;
                        data.timeShiftYear =@Model.Year;
                        data.timeShiftMonth =@Model.Month;

                        return JSON.stringify(data);
                    }
                },
                order: [[0, 'desc']],
                columns: [
                    {
                        "data": "ToggleSlider",
                        "searchable": false,
                        "orderable": false,
                        render: (a, b, data, d) => {
                            //console.log(data);
                            if (data.ToggleSlider != null)
                                return data.ToggleSlider;
                            else
                                return "";
                        }
                    },
                    {
                        "data": "FirstName",
                        "searchable": true,
                        "orderable": true,
                        render: (a, b, data, d) => {
                            if (data.FirstName != null)
                                return data.FirstName;
                            else
                                return "";
                        }
                    },
                    {
                        "data": "LastName",
                        "searchable": false,
                        "orderable": false,
                        render: (a, b, data, d) => {
                            if (data.LastName != null)
                                return data.LastName;
                            else
                                return "";
                        }
                    },
                    {
                        "data": "Day1",
                        "searchable": false,
                        "orderable": false,
                        render: (a, b, data, d) => {
                            if (data.Day1 != null)
                                return data.Day1;
                            else
                                return "";
                        }
                    },
                    {
                        "data": "Day2",
                        "searchable": false,
                        "orderable": false,
                        render: (a, b, data, d) => {
                            if (data.Day2 != null)
                                return data.Day2;
                            else
                                return "";
                        }
                    },
                    {
                        "data": "Day3",
                        "searchable": false,
                        "orderable": false,
                        render: (a, b, data, d) => {
                            if (data.Day3 != null)
                                return data.Day3;
                            else
                                return "";
                        }
                    },
                    {
                        "data": "Day4",
                        "searchable": false,
                        "orderable": false,
                        render: (a, b, data, d) => {
                            if (data.Day4 != null)
                                return data.Day4;
                            else
                                return "";
                        }
                    },
                    {
                        "data": "Day5",
                        "searchable": false,
                        "orderable": false,
                        render: (a, b, data, d) => {
                            if (data.Day5 != null)
                                return data.Day5;
                            else
                                return "";
                        }
                    },
                    {
                        "data": "Day6",
                        "searchable": false,
                        "orderable": false,
                        render: (a, b, data, d) => {
                            if (data.Day6 != null)
                                return data.Day6;
                            else
                                return "";
                        }
                    },
                    {
                        "data": "Day7",
                        "searchable": false,
                        "orderable": false,
                        render: (a, b, data, d) => {
                            if (data.Day7 != null)
                                return data.Day7;
                            else
                                return "";
                        }
                    },
                    {
                        "data": "Day8",
                        "searchable": false,
                        "orderable": false,
                        render: (a, b, data, d) => {
                            if (data.Day8 != null)
                                return data.Day8;
                            else
                                return "";
                        }
                    },
                    {
                        "data": "Day9",
                        "searchable": false,
                        "orderable": false,
                        render: (a, b, data, d) => {
                            if (data.Day9 != null)
                                return data.Day9;
                            else
                                return "";
                        }
                    },
                    {
                        "data": "Day10",
                        "searchable": false,
                        "orderable": false,
                        render: (a, b, data, d) => {
                            if (data.Day10 != null)
                                return data.Day10;
                            else
                                return "";
                        }
                    },
                    {
                        "data": "Day11",
                        "searchable": false,
                        "orderable": false,
                        render: (a, b, data, d) => {
                            if (data.Day11 != null)
                                return data.Day11;
                            else
                                return "";
                        }
                    },
                    {
                        "data": "Day12",
                        "searchable": false,
                        "orderable": false,
                        render: (a, b, data, d) => {
                            if (data.Day12 != null)
                                return data.Day12;
                            else
                                return "";
                        }
                    },
                    {
                        "data": "Day13",
                        "searchable": false,
                        "orderable": false,
                        render: (a, b, data, d) => {
                            if (data.Day13 != null)
                                return data.Day13;
                            else
                                return "";
                        }
                    },
                    {
                        "data": "Day14",
                        "searchable": false,
                        "orderable": false,
                        render: (a, b, data, d) => {
                            if (data.Day14 != null)
                                return data.Day14;
                            else
                                return "";
                        }
                    },
                    {
                        "data": "Day15",
                        "searchable": false,
                        "orderable": false,
                        render: (a, b, data, d) => {
                            if (data.Day15 != null)
                                return data.Day15;
                            else
                                return "";
                        }
                    },
                    {
                        "data": "Day16",
                        "searchable": false,
                        "orderable": false,
                        render: (a, b, data, d) => {
                            if (data.Day16 != null)
                                return data.Day16;
                            else
                                return "";
                        }
                    },
                    {
                        "data": "Day17",
                        "searchable": false,
                        "orderable": false,
                        render: (a, b, data, d) => {
                            if (data.Day17 != null)
                                return data.Day17;
                            else
                                return "";
                        }
                    },
                    {
                        "data": "Day18",
                        "searchable": false,
                        "orderable": false,
                        render: (a, b, data, d) => {
                            if (data.Day18 != null)
                                return data.Day18;
                            else
                                return "";
                        }
                    },
                    {
                        "data": "Day19",
                        "searchable": false,
                        "orderable": false,
                        render: (a, b, data, d) => {
                            if (data.Day19 != null)
                                return data.Day19;
                            else
                                return "";
                        }
                    },
                    {
                        "data": "Day20",
                        "searchable": false,
                        "orderable": false,
                        render: (a, b, data, d) => {
                            if (data.Day20 != null)
                                return data.Day20;
                            else
                                return "";
                        }
                    },
                    {
                        "data": "Day21",
                        "searchable": false,
                        "orderable": false,
                        render: (a, b, data, d) => {
                            if (data.Day21 != null)
                                return data.Day21;
                            else
                                return "";
                        }
                    },
                    {
                        "data": "Day22",
                        "searchable": false,
                        "orderable": false,
                        render: (a, b, data, d) => {
                            if (data.Day22 != null)
                                return data.Day22;
                            else
                                return "";
                        }
                    },
                    {
                        "data": "Day23",
                        "searchable": false,
                        "orderable": false,
                        render: (a, b, data, d) => {
                            if (data.Day23 != null)
                                return data.Day23;
                            else
                                return "";
                        }
                    },
                    {
                        "data": "Day24",
                        "searchable": false,
                        "orderable": false,
                        render: (a, b, data, d) => {
                            if (data.Day24 != null)
                                return data.Day24;
                            else
                                return "";
                        }
                    },
                    {
                        "data": "Day25",
                        "searchable": false,
                        "orderable": false,
                        render: (a, b, data, d) => {
                            if (data.Day25 != null)
                                return data.Day25;
                            else
                                return "";
                        }
                    },
                    {
                        "data": "Day26",
                        "searchable": false,
                        "orderable": false,
                        render: (a, b, data, d) => {
                            if (data.Day26 != null)
                                return data.Day26;
                            else
                                return "";
                        }
                    },
                    {
                        "data": "Day27",
                        "searchable": false,
                        "orderable": false,
                        render: (a, b, data, d) => {
                            if (data.Day27 != null)
                                return data.Day27;
                            else
                                return "";
                        }
                    },
                    {
                        "data": "Day28",
                        "searchable": false,
                        "orderable": false,
                        render: (a, b, data, d) => {
                            if (data.Day28 != null)
                                return data.Day28;
                            else
                                return "";
                        }
                    },
                    {
                        "data": "Day29",
                        "searchable": false,
                        "orderable": false,
                        render: (a, b, data, d) => {
                            if (data.Day29 != null)
                                return data.Day29;
                            else
                                return "";
                        }
                    },
                    {
                        "data": "Day30",
                        "searchable": false,
                        "orderable": false,
                        render: (a, b, data, d) => {
                            if (data.Day30 != null)
                                return data.Day30;
                            else
                                return "";
                        }
                    },
                    {
                        "data": "Day31",
                        "searchable": false,
                        "orderable": false,
                        render: (a, b, data, d) => {
                            if (data.Day31 != null)
                                return data.Day31;
                            else
                                return "";
                        }
                    }
                ],
                 rowCallback: function (row, data, displayNum, displayIndex, dataIndex) {
                     for (var i = 1; i <= 31 ; i++) {
                         row.querySelectorAll('td')[i + 2].setAttribute("class", "DataTableHoverCell")
                         //row.querySelectorAll('td')[i + 1].setAttribute("employeeid", data.Id)
                         row.querySelectorAll('td')[i + 2].setAttribute('style', 'background-color:' + $(data["Day" + i]).attr('cellcolor'))
                     }

               },
               "fnDrawCallback": function () {
                   $('.ToggleSliders').bootstrapToggle({
                       on: 'Ναί',
                       off: 'Όχι'
                   });
               },
            });
    </script>

    <!--    Html Append -->
    <script>
        var AppendPreloadedEmployeeToWorkHour = (workHourId, currNum, employeeId, text) =>
            document.getElementsByClassName('AppendEmployeeNum_' + workHourId)[0].insertAdjacentHTML('beforeend',
                '<div class="row" id="EmployeeRowNum_' + currNum + '">' +
                '<div class=" col-sm-3 col-md-3"></div>' +
                '<div class="col-sm-5 col-md-5">' +
                '<select class="EmployeeSelect2WorkHourNum_' + workHourId + '" id="EmployeesSelect2Num_' + workHourId + '_EmployeeNum_' + currNum + '" style="width:100%" disabled>' +
                '<option value="' + employeeId + '" selected="selected">' + text + '</option>' +
                '</select >' +
                '<span style="display:none;" id="EmployeeSpanWorkHourNum_' + workHourId + '_EmployeeNum_' + currNum + '" class="text-danger EmployeeSelect2Span EmployeeSelect2SpanWorkHourNum_' + workHourId + '"></span>' +
                '</div >' +
                '</div >'
            );

        var AppendEmployeeToWorkHour = (workHourId, currNum) =>
            document.getElementsByClassName('AppendEmployeeNum_' + workHourId)[0].insertAdjacentHTML('beforeend',
                '<div class="row" id="EmployeeRowNum_' + currNum + '">' +
                '<div class="col-sm-3 col-md-3"></div>' +
                '<div class="col-sm-5 col-md-5">' +
                '<select class="EmployeeSelect2WorkHourNum_' + workHourId + '" id="EmployeesSelect2Num_' + workHourId + '_EmployeeNum_' + currNum + '" style="width:100%"></select >' +
                '<span style="display:none;" id="EmployeeSpanWorkHourNum_' + workHourId + '_EmployeeNum_' + currNum + '" class="text-danger EmployeeSelect2Span EmployeeSelect2SpanWorkHourNum_' + workHourId + '"></span>' +
                '</div >' +
                '<div class="col-sm-1 col-md-1">' +
                '<button class= "btn btn-danger EmployeeRowDeleteButton" WorkHourId="' + workHourId + '" Num="' + currNum + '"> <i class="fa fa-user EmployeeDeleteButton" WorkHourId="' + workHourId + '" Num="' + currNum + '"></i></button >' +
                '</div >' +
                '</div >'
            );

        AppendNewWorkHourToAddModal = (WorkHourId) =>
            document.getElementById('AddWorkHour_ModalBody').insertAdjacentHTML('beforeend',

                '<div style="padding-top:10px;" class= "row ElementToDeleteOnClose WorkHourDiv AppendEmployeeNum_' + WorkHourId + '" id="WorkHourRowNum_' + WorkHourId + '">' +
                    '<label style="padding-left:10px;" class="control-label"> Προσθήκη έναρξη - λήξη βάρδιας για εργαζόμενο/ους:</label>' +
                    '<div style="padding-left:40px;" class="row">' +
                        '<div class=" col-md-2 col-sm-2"><button class="btn btn-primary" id="CalentimButtonNum_' + WorkHourId + '"><i class="fa fa-calendar" ></i></button></div>' +
                        '<div class="col-md-5 col-sm-5">' +
                            '<div class="row">' +
                                '<input class="calentim hidden calentimInput" id="CalentimInputNum_' + WorkHourId + '" />' +
                                '<div class="row">' +
                                    '<span id="WorkHourErrorSpanNum_' + WorkHourId + '" class="WorkHourErrorSpan text-danger" style="display: none;"></span>' +
                                '</div>' +
                                '<div class="col-md-4 col-sm-42">' +
                                    'Έναρξη: </br> ' +
                                    'Λήξη:</br> ' +
                                    'ΏρεςΕργ.:' +
                                '</div>' +
                                '<div class="col-md-8 col-sm-8 ">' +
                                    '<span class="TimeSpan" id="StartOnNum_' + WorkHourId + '"></span></br> ' +
                                    '<span  id="EndOnNum_' + WorkHourId + '"></span></br>' +
                                    '<span id="TotalHoursNum_' + WorkHourId + '"></span>' +
                                '</div>' +
                            '</div>' +
                        '</div>' +
                        '<div class="col-md-2 col-sm-2">' +
                            '<button class="btn btn-danger celentimDeleteButton" celentimid="' + WorkHourId + '"><i class="fa fa-trash-o celentimDeleteButton" celentimid="' + WorkHourId + '"></i></button>' +
                        '</div>' +
                    '</div >' +

                    '<div style="padding-left:40px;" class="row">' +
                        '<div class="col-md-2 col-sm-2 "><button class="btn btn-success AppendEmployeeToWorkHourButton" Num="' + WorkHourId + '"><i class="fa fa-plus " Num="' + WorkHourId + '"></i><i class="fa fa-user " Num="' + WorkHourId + '"></i></button></div>' +
                        '<div class="col-md-5 col-sm-5"><p> Υπάλληλοι:</p></div>' +
                    '</div >' +
                '</div >');
    </script>



}







@*'<div style="padding-top:10px;" class="row ElementToDeleteOnClose WorkHourDiv AppendEmployeeNum_' + WorkHourId + '" id="WorkHourRowNum_' + WorkHourId + '">
        ' +
        '<label class="control-label"> Προσθήκη έναρξη - λήξη βάρδιας για εργαζόμενο/ους:</label>' +
        '<div style="width: 100%;">
            '+
            '<div style="width: 50px; float: left;"> </div>' +
            '<div style="width: 50px; float: left;">
                ' +
                '<button class="btn btn-primary" id="CalentimButtonNum_' + WorkHourId + '"><i class="fa fa-calendar"></i></button>'+
                '
            </div>' +
            '<div style="width: 300px; float: left;">
                ' +
                '<input class="calentim hidden calentimInput" id="CalentimInputNum_' + WorkHourId + '" />' +
                '<span id="WorkHourErrorSpanNum_' + WorkHourId + '" class="WorkHourErrorSpan text-danger" style="display: none;"></span>' +
                '<div class="col-sm-4">
                    ' +
                    'Έναρξη: </br> ' +
                    'Λήξη:</br> ' +
                    'ΏρεςΕργ.:' +
                    '
                </div>' +
                '<div class="col-sm-8">
                    ' +
                    '<span class="TimeSpan" id="StartOnNum_' + WorkHourId + '"></span></br> ' +
                    '<span id="EndOnNum_' + WorkHourId + '"></span></br>' +
                    '<span id="TotalHoursNum_' + WorkHourId + '"></span>' +
                    '
                </div>' +
                '
            </div>' +
            '
        </div>' +
        '<div style="width: 50px; float: left;">
            ' +
            '<button class="btn btn-danger celentimDeleteButton" celentimid="' + WorkHourId + '"><i class="fa fa-trash-o celentimDeleteButton" celentimid="' + WorkHourId + '"></i></button>' +
            '
        </div>' +



        '<div style="width: 100%;">
            ' +
            '<div style="width: 50px; float: left;"> </div>' +
            '<div style="width: 50px; float: left;">
                ' +
                '<button class="btn btn-success AppendEmployeeToWorkHourButton" Num="' + WorkHourId + '"><i class="fa fa-plus " Num="' + WorkHourId + '"></i><i class="fa fa-user " Num="' + WorkHourId + '"></i></button>' +
                '
            </div>' +
            '<div style="width: 300px; float: left;">
                ' +
                '<p> Υπάλληλοι:</p> '+
                '
            </div>' +
            '
        </div>' +
        '
    </div>');*@