@model DataAccess.ViewModels.ApplicationUserEdit;

@{ Layout = "~/Views/Shared/_Layout.cshtml"; }


<div class="row">
    <div class="col-md-3"> </div>
    <div class="col-md-6">
        <div class="box box-danger" style="margin-top:5%;">

            <div class="box-header">
                <h3 class="box-title">@ViewData["Title"]</h3>
                <div class="pull-right">
                    <button asp-action="Index" class="btn btn-primary">Πίσω στην λίστα</button>
                </div>
            </div>

            <hr />

            <form asp-controller="User" asp-action="Edit" method="post">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <input type="text" asp-for="Id" class="hidden" disabled />

                <div class="box-body">

                    <div class="form-group">
                        <label asp-for="FirstName" class="control-label"></label>
                        <div class="input-group">
                            @if (Model.IsEmployee)
                            {
                <input asp-for="FirstName" class="form-control" readonly />}
            else
            { <input asp-for="FirstName" class="form-control" />}
                        </div>
                        <span asp-validation-for="FirstName" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <label asp-for="LastName" class="control-label"></label>
                        <div class="input-group">
                            @if (Model.IsEmployee)
                            {
                <input asp-for="LastName" class="form-control" readonly />}
            else
            { <input asp-for="LastName" class="form-control" />}
                            @*<input asp-for="LastName" class="form-control" />*@
                            <span asp-validation-for="LastName" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="form-group">
                        <label asp-for="UserName" class="control-label"></label>
                        <div class="input-group">
                            <input asp-for="UserName" class="form-control" />
                            <span asp-validation-for="UserName" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="form-group">
                        <label asp-for="Email" class="control-label"></label>
                        <div class="input-group">
                            <input asp-for="Email" class="form-control" />
                            <span asp-validation-for="Email" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="form-group">
                        <label asp-for="IsEmployee" class="control-label"></label>
                        <div class="input-group">
                            <input type="checkbox" asp-for="IsEmployee" class="form-control IsEmployeeSlider" />
                            <span asp-validation-for="IsEmployee" class="text-danger"></span>
                        </div>
                    </div>

                    @if (Model.IsEmployee)
                    {

        <div class="form-group" id="EmployeeIdDiv">
            <label asp-for="EmployeeId" class="control-label"></label>
            <div class="input-group" style="width:100%">
                <select class="Employee_Select2" asp-for="EmployeeId" style="width:50%">
                    @if (Model.EmployeeId != null)
                    {
    <option value="@Model.EmployeeId" selected="selected">@Model.EmployeeOption</option>
}
                </select>
                <span asp-validation-for="EmployeeId" class="text-danger"></span>
            </div>
        </div>}
    else
    {
<div class="form-group" id="EmployeeIdDiv" style="display:none;">
    <label asp-for="EmployeeId" class="control-label"></label>
    <div class="input-group" style="width:100%">
        <select class="Employee_Select2" asp-for="EmployeeId" style="width:50%">
            }
        </select>
        <span asp-validation-for="EmployeeId" class="text-danger"></span>
    </div>
</div>}

                    <div class="form-group pull-right">
                        <input type="submit" value="Αποθήκευση" class="btn btn-primary " />
                    </div>
                </div>
            </form>
        </div>
    </div>
    <div class="col-md-3"> </div>
</div>


<div class="row">
    <div class="col-md-1"> </div>
    <div class="col-md-5">
        <div class="box box-danger" style="margin-top:5%;">
            <div class="box-header">
                <h3 class="box-title">@ViewData["UserRolesTable"]</h3>
            </div>
            <hr />
            <div class="box-body table-responsive">
                <table id="rolesDatatable" class="table table-bordered table-hover table-responsive stripe">
                    <thead>
                        <tr>
                            <th>Όνομα</th>
                            <th>Προβολή</th>
                            <th>Επεξεργασία</th>
                            <th>Δημιουργία</th>
                            <th>Απενεργοποίηση</th>
                            <th>Διαγραφή</th>
                        </tr>
                    </thead>
                    <tfoot>
                        <tr>
                            <th>Όνομα</th>
                            <th>Προβολή</th>
                            <th>Επεξεργασία</th>
                            <th>Δημιουργία</th>
                            <th>Απενεργοποίηση</th>
                            <th>Διαγραφή</th>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    </div>
    <div class="col-md-1"> </div>
    <div class="col-md-4">
        <div class="row">
            <div class="box box-danger" style="margin-top:5%;">

                <div class="box-header">
                    <h3 class="box-title">Φιλτράρισμα αποτελεσμάτων εφαρρμογής με βάση συγκεκριμένα πόστα</h3>
                </div>
                <hr />
                <div class="box-body">
                    <div style="width:100%;" id="BoxWorkPlace">
                        <div style="width:100%; float:left;">
                            Προσθήκη πόστου
                            <button id="ButtonAddWorkPlace" class="btn btn-success"><i class="fa fa-plus"></i></button>
                        </div>

                        <div style="width:100%; float:left;" id="DivToAppendSelect2"></div>

                        <div class="form-group pull-right">
                            <button @*style="display:none;"*@ value="Αποθήκευση" class="btn btn-primary" id="ButtonSaveWorkPlaces">Αποθήκευση</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="box box-danger" style="margin-top:5%;">

                <div class="box-header">
                    <h3 class="box-title">Επαναφορά κωδικού χρήστη</h3>
                </div>
                <hr />
                <div class="box-body">
                    <h4 class="box-body">Στο επόμενο login που θα κανει ο χρήστης θα του ζητηθεί να αλλάξει κωδικό</h4>
                    <div style="display: flex; justify-content: center; align-items: center;">
                        <button class="btn btn-warning" id="UserPasswordReset">Επαναφορά κωδικού</button>

                    </div>
                </div>

            </div>
        </div>
    </div>
    <div class="col-md-1"> </div>

</div>
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        var Select2Count = 0;
        var WorkPlaceRoleIds = @Html.Raw(Json.Serialize(Model.WorkPlaceRoles))
        var UserId = @Html.Raw(Json.Serialize(Model.Id))


        const BuildSelect2DtoNum = params => ({
            search: params.term,
            page: params.page || 1,
            existingIds: GetSelectedWokPlaceIds()
        });

        const BuildUpdateWorkPlaceRolesDto = () => ({
            userId: UserId,
            workPlaceValues: BuildWokPlaceValuesDto(),
            workPlaceIdsToDelete: GetToDeleteWokPlaceIds()
        });

        const BuildWokPlaceValuesDto = () =>
            [...document.getElementsByClassName('WorkPlaceSelect2')]
                .filter(select2 => select2.value != '' &&
                    !IsSelect2ToBeDeleted(select2.id.split('_')[1]) &&
                    HasChangedValueToSelect2(select2.id.split('_')[1]))
                .map(select2 => ({
                    existingWorkPlaceId: GetDatabaseValueId(select2.id.split('_')[1]),
                    newWorkPlaceId: select2.value
                }));
    </script>

    <!--///////////////////////////////////////-->
    <!--///             Functions           ///-->
    <!--///////////////////////////////////////-->
    <script>

        const AppendExistingWorkPlaceRole = role =>
            document.getElementById('DivToAppendSelect2')
                .insertAdjacentHTML('beforeend', ExistingSelect2HTML(role));

        const GetSelectedWokPlaceIds = () =>
            [...document.getElementsByClassName('WorkPlaceSelect2')]
                .map(select2 => select2.value)
                .filter(val => val != "");

        const GetDatabaseValueId = num =>
            document.getElementById('DatabaseValueIdNum_' + num).value;

        const GetDatabaseValueName = num =>
            document.getElementById('DatabaseValueNameNum_' + num).value;

        const SetDatabaseValueId = (num, value) =>
            document.getElementById('DatabaseValueIdNum_' + num).value = value;

        const SetDatabaseValueName = (num, value) =>
            document.getElementById('DatabaseValueNameNum_' + num).value = value;

        const GetNewValuesWokPlaceIds = () =>
            [...document.getElementsByClassName('WorkPlaceSelect2')]
                .filter(select2 => document.getElementById('DatabaseValueIdNum_' + select2.id.split('_')[1]).value != select2.value)
                .map(select2 => select2.value)
                .filter(val => val != "");

        const GetToDeleteWokPlaceIds = () =>
            [...document.getElementsByClassName('DivSelect2')]
                .filter(div => div.style.opacity == '0.5')
                .map(div => document
                    .getElementById('WorkPlaceSelect2Num_' + div.id.split('_')[1])
                    .value)
                .filter(val => val != "")

        const RefreshWorkPlaceRoles = response => {
            //remove old divs
            [...document.getElementsByClassName('DivSelect2')].forEach(div => div.remove());
            //Append new divs
            response.forEach(role => {
                AppendExistingWorkPlaceRole(role);
                WorkPlaceSelect2(Select2Count);
            })
        }

        const IsSelect2ToBeDeleted = num =>
            document.getElementById('DivSelect2Num_' + num).style.opacity == '0.5';

        const HasChangedValueToSelect2 = num =>
            document.getElementById('WorkPlaceSelect2Num_' + num).value != document.getElementById('DatabaseValueIdNum_' + num).value;

        const HandleSelect2State = workPlaceId => {
            var editButton = document
                .getElementById('Select2EditButtonNum_' + workPlaceId);

            var undoButton = document
                .getElementById('Select2UndoButtonNum_' + workPlaceId);

            var deleteButton = document
                .getElementById('Select2DeleteButtonNum_' + workPlaceId);

            var select2 = document
                .getElementById('WorkPlaceSelect2Num_' + workPlaceId);

            if (editButton.style.display == '') {
                editButton.style.display = 'none';
                undoButton.style.display = '';
                deleteButton.style.display = '';
                select2.disabled = false;
            } else {
                editButton.style.display = '';
                undoButton.style.display = 'none';
                deleteButton.style.display = 'none';
                select2.disabled = true;
            }
        }
    </script>

    <!--///////////////////////////////////////-->
    <!--///               Events            ///-->
    <!--///////////////////////////////////////-->
    <script>
        //Handle show/hide Employee fields
        $('.IsEmployeeSlider').change(e => {
            if (e.target.checked) {
                document.getElementById('EmployeeIdDiv').style.display = '';
                document.getElementById('FirstName').readOnly = true;
                document.getElementById('LastName').readOnly = true;
            }
            else {
                document.getElementById('EmployeeIdDiv').style.display = 'none';
                document.getElementById('FirstName').readOnly = false;
                document.getElementById('LastName').readOnly = false;
            }
        });

        //Fill Employee fiels on Employee selection
        $('.Employee_Select2').change(e => {
            if (e.target.value != '') {
                var names = e.target.options[e.target.selectedIndex].innerText
                    .split(' ')
                    .filter(str => str.length >= 1);
                console.log(names);

                document.getElementById('FirstName').value = names[0];
                document.getElementById('LastName').value = names[1];
            }
        });

        //Add WorkPlace Select2
        $('#ButtonAddWorkPlace').on('click', () => {
            document.getElementById('DivToAppendSelect2')
                .insertAdjacentHTML('beforeend', NewSelect2HTML());

            WorkPlaceSelect2(Select2Count);
        });

        //Edit WorkPlace
        $('#BoxWorkPlace').on('click', '.Select2EditButton', e => {
            HandleSelect2State(e.target.id.split('_')[1]);
        })

        //Undo WorkPlace
        $('#BoxWorkPlace').on('click', '.Select2UndoButton', e => {
            var num = e.target.id.split('_')[1];
            HandleSelect2State(num);
            $('#WorkPlaceSelect2Num_' + num).select2('destroy');
            $('#WorkPlaceSelect2Num_' + num).append(GetSelect2Option(num));
            $('#WorkPlaceSelect2Num_' + num).val(GetDatabaseValueId(num));
            $('#WorkPlaceSelect2Num_' + num).select2();


        })

        //Save WorkPlaces
        $('#BoxWorkPlace').on('click', '#ButtonSaveWorkPlaces', e => {
            $.ajax({
                type: "POST",
                url: '/api/userrole/updateworkplaceroles',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: JSON.stringify(BuildUpdateWorkPlaceRolesDto())
            }).done(response => RefreshWorkPlaceRoles(response));
        })


        //Delete WorkPlace
        $('#BoxWorkPlace').on('click', '.Select2DeleteButton', e => {
            var num = e.target.id.split('_')[1];
            if (document.getElementById('DatabaseValueIdNum_' + num).value == '')
                document.getElementById('DivSelect2Num_' + num).remove()
            else
                document.getElementById('DivSelect2Num_' + num).style.opacity = '0.5';


        });

        //Password Reset
        $('#UserPasswordReset').on("click", e => {
            var userId = document.getElementById('Id').value;
            var apiUrl = "/api/users/resetpassword/" + userId;

            $.ajax({
                url: apiUrl,
                type: "POST",
                success: function (data, textStatus, jqXHR) {
                    console.log('success');
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.log('error');
                }
            });
        });
    </script>

    <!--///////////////////////////////////////-->
    <!--///             Libraries           ///-->
    <!--///////////////////////////////////////-->
    <script>
        //IsEmploye slider
        $('.IsEmployeeSlider').bootstrapToggle({
            on: 'Ναί',
            off: 'Όχι'
        })

        //Employees Select2
        $('.Employee_Select2').select2({
            allowClear: true,
            ajax: {
                type: "POST",
                url: '/api/employees/select2',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: params => JSON.stringify({
                    search: params.term,
                    page: params.page || 1
                })
            }
        });

        //WorkPlaces Select2
        const WorkPlaceSelect2 = Select2Count =>
            $('#WorkPlaceSelect2Num_' + Select2Count).select2({
                ajax: {
                    type: "POST",
                    url: '/api/workplaces/select2filtered',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: params => JSON.stringify(BuildSelect2DtoNum(params))
                }
            });


        jQuery(function () {
            //console.log(WorkPlaceRoleIds);
            //Append existing workplaces
            [...WorkPlaceRoleIds].forEach(role => {
                AppendExistingWorkPlaceRole(role);
                WorkPlaceSelect2(Select2Count);
            });


             $('#rolesDatatable').DataTable({
                 serverSide: true,
                 responsive: true,
                 processing: true,
                 colReorder: true,
                 lengthMenu: [[10, 25, 50, 100, 150, -1], [10, 25, 50, 100, 150,"Όλα"]],
                 iDisplayLength: 150,
                dom: 'frtlp',
                ajax: {
                    url: '/api/role/datatable',
                    type: 'POST',
                    contentType: "application/json",
                    data: (data, type, row, meta) => {
                        data.userId = '@Model.Id';
                        data.Predicate='UserEdit'
                        return JSON.stringify(data);
                    }
                },
                order: [[0, 'desc']],
                columns: [
                    {
                        data: "Name",
                        searchable: true,
                        orderable: true,
                        render: (a, b, data, d) => {
                            //console.log(data);
                            if (data.Name != null)
                                return data.Name;
                            else
                                return "";
                        }
                    },
                    {
                        data: "View",
                        searchable: false,
                        orderable: false,
                        render: (a, b, data, d) => {
                            if (data.View != null)
                                return data.View.result;
                            else
                                return "";
                        }
                    },
                    {
                        data: "Edit",
                        searchable: false,
                        orderable: false,
                        render: (a, b, data, d) => {
                            if (data.Edit != null)
                                return data.Edit.result ;
                            else
                                return "";
                        }
                    },
                    {
                        data: "Create",
                        searchable: false,
                        orderable: false,
                        render: (a, b, data, d) => {
                            if (data.Create != null)
                                return data.Create.result;
                            else
                                return "";
                        }
                    },
                    {
                        data: "Deactivate",
                        searchable: false,
                        orderable: false,
                        render: (a, b, data, d) => {
                            if (data.Deactivate!= null)
                                return data.Deactivate.result;
                            else
                                return "";
                        }
                    },
                    {
                        data: "Delete",
                        searchable: false,
                        orderable: false,
                        render: (a, b, data, d) => {
                            if (data.Delete != null)
                                return data.Delete.result;
                            else
                                return "";
                        }
                    }
                ]
            });
        });
    </script>


    <script>


        $('#rolesDatatable').on("change", ".PermitionCheckbox", (data) => {
            var userId = data.target.attributes['userid'].nodeValue;
            var roleId = data.target.attributes['roleid'].nodeValue;
            var apiUrl = "/api/userrole/delete/" + userId + "/" + roleId;

            if (data.target.checked)
                apiUrl = "/api/userrole/add/" + userId + "/" + roleId;

            $.ajax({
                url: apiUrl,
                type: "POST",
                success: function (data, textStatus, jqXHR) {
                    console.log('success');
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.log('error');
                }
            });
        });

        const GetSelect2Option = num => '<option value="' + GetDatabaseValueId(num) + '" selected="selected">' + GetDatabaseValueName(num) + '</option>';


        const NewSelect2HTML = () => '' +
            '<div style="width:100%; padding-top:10px;"class="DivSelect2"  id="DivSelect2Num_' + ++Select2Count + '">' +
            '<div style="width: 60%; float: left;">' +
            '<input style="display: none;" id="DatabaseValueIdNum_' + Select2Count + '"/>' +
            '<select id="WorkPlaceSelect2Num_' + Select2Count + '"class="WorkPlaceSelect2" style="width:100%"></select >' +
            '</div >' +
            '<div style="width: 5%; float: left;">&nbsp;</div >' +
            '<div style="width: 20%; float: left;">' +
            '<button style="display:none;" class= "btn btn-warning Select2EditButton" id="Select2EditButtonNum_' + Select2Count + '"> <i class="fa fa-pencil Select2EditButton" id="Select2EditFafaNum_' + Select2Count + '"></i></button >' +
            '<button class= "btn btn-danger Select2DeleteButton" id="Select2DeleteButtonNum_' + Select2Count + '"> <i class="fa fa-trash Select2DeleteButton" id="Select2DeleteFafaNum_' + Select2Count + '"></i></button >' +
            '</div >' +
            '</div >';

        const ExistingSelect2HTML = role => '' +
            '<div style="width:100%; padding-top:10px;"class="DivSelect2" id="DivSelect2Num_' + ++Select2Count + '">' +
            '<div style="width: 60%; float: left;">' +
            '<input style="display: none;" id="DatabaseValueIdNum_' + Select2Count + '" value="' + role.workPlaceId + '"/>' +
            '<input style="display: none;" id="DatabaseValueNameNum_' + Select2Count + '" value="' + role.Name + '"/>' +
            '<select id="WorkPlaceSelect2Num_' + Select2Count + '"class="WorkPlaceSelect2" style="width:100%" disabled>' +
            '<option value="' + role.workPlaceId + '" selected="selected">' + role.name + '</option>' +
            '</select >' +
            '</div >' +
            '<div style="width: 5%; float: left;">&nbsp;</div >' +
            '<div style="width: 20%; float: left;">' +
            '<button style="display:none;" class= "btn btn-primary Select2UndoButton" id="Select2UndoButtonNum_' + Select2Count + '"> <i class="fa fa-pencil Select2UndoButton" id="Select2UndoFafaNum_' + Select2Count + '"></i></button >' +
            '<button class= "btn btn-warning Select2EditButton" id="Select2EditButtonNum_' + Select2Count + '"> <i class="fa fa-pencil Select2EditButton" id="Select2EditFafaNum_' + Select2Count + '"></i></button >' +
            '<button style="display:none;" class= "btn btn-danger Select2DeleteButton" id="Select2DeleteButtonNum_' + Select2Count + '"> <i class="fa fa-trash Select2DeleteButton" id="Select2DeleteFafaNum_' + Select2Count + '"></i></button >' +
            '</div >' +
            '</div >';

    </script>


}
